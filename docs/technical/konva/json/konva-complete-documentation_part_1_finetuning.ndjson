{"messages": [{"role": "system", "content": "Section: Konva.js Complete Documentation\nLevel: H1\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Extracted on:** October 25, 2025  \n**Source:** https://konvajs.org\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Table of Contents\nLevel: H2\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "1. [Introduction](#introduction)\n2. [API Reference](#api-reference)\n3. [Shapes](#shapes)\n4. [Styling](#styling)\n5. [Events](#events)\n6. [Drag and Drop](#drag-and-drop)\n7. [Select and Transform](#select-and-transform)\n8. [Clipping](#clipping)\n9. [Groups and Layers](#groups-and-layers)\n10. [Filters](#filters)\n11. [Tweens](#tweens)\n12. [Animations](#animations)\n13. [Selectors](#selectors)\n14. [Data and Serialization](#data-and-serialization)\n15. [Performance](#performance)\n16. [Framework Integrations](#framework-integrations)\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: What's Konva?\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Konva is an HTML5 Canvas JavaScript framework that extends the 2d context by enabling canvas interactivity for desktop and mobile applications.\n\nKonva enables high performance animations, transitions, node nesting, layering, filtering, caching, event handling for desktop and mobile applications, and much more.\n\nYou can draw things onto the stage, add event listeners to them, move them, scale them, and rotate them independently from other shapes to support high performance animations, even if your application uses thousands of shapes."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Installation\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**NPM:**\n```bash\nnpm install konva\n```\n\n**Script Tag:**\n```html\n<script src=\"https://unpkg.com/konva@10/konva.min.js\"></script>\n```\n\n**CDN:**\n- Full version: konva.js\n- Min version: konva.min.js\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Konva Core\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Global Properties:**\n\n- `Konva.autoDrawEnabled` (default: true) - Should Konva automatically update canvas on any changes\n- `Konva.hitOnDragEnabled` (default: false) - Should we enable hit detection while dragging?\n- `Konva.capturePointerEventsEnabled` (default: false) - Should we capture touch events and bind them to the touchstart target?\n- `Konva.legacyTextRendering` (default: false) - Use legacy text rendering with \"middle\" baseline by default\n- `Konva.pixelRatio` (default: undefined) - Global pixel ratio configuration\n- `Konva.dragDistance` (default: 0) - Drag distance property\n- `Konva.angleDeg` (default: true) - Use degree values for angle properties\n- `Konva.showWarnings` (default: true) - Show different warnings about errors or wrong API usage\n- `Konva.dragButtons` (default: [0]) - Configure what mouse buttons can be used for drag and drop\n- `Konva.releaseCanvasOnDestroy` (default: true) - Should Konva release canvas elements on destroy\n\n**Methods:**\n\n- `Konva.isDragging()` - returns whether or not drag and drop is currently active\n- `Konva.isDragReady()` - returns whether or not a drag and drop operation is ready\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Animation\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Animation(config)\n```\n\nAnimation constructor executed on each animation frame.\n\n**Parameters:**\n- `func` (AnimationFn) - function executed on each frame with frame object containing:\n  - `timeDiff` - milliseconds since last frame\n  - `time` - time elapsed from animation start\n  - `lastTime` - time value from previous frame\n  - `frameRate` - current frame rate in frames/second\n- `layers` (Konva.Layer|Array) (optional) - layer(s) to redraw on each frame\n\n**Methods:**\n- `setLayers(layers)` - set layers to be redrawn\n- `getLayers()` - get layers (returns Array)\n- `addLayer(layer)` - add layer, returns true if added\n- `isRunning()` - returns Bool\n- `start()` - start animation (returns this)\n- `stop()` - stop animation (returns this)\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Arc\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Arc(config)\n```\n\nArc constructor.\n\n**Parameters:**\n- `angle` (Number) - in degrees\n- `innerRadius` (Number)\n- `outerRadius` (Number)\n- `clockwise` (Boolean) (optional)\n- Plus all standard shape styling properties (fill, stroke, shadow, etc.)\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Arrow\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Arrow(config)\n```\n\nArrow constructor.\n\n**Parameters:**\n- `points` (Array) - Flat array of coordinates [x1, y1, x2, y2, x3, y3]\n- `tension` (Number) (optional) - Higher values = more curvy. Default: 0\n- `pointerLength` (Number) - Arrow pointer length. Default: 10\n- `pointerWidth` (Number) - Arrow pointer width. Default: 10\n- `pointerAtBeginning` (Boolean) - Draw pointer at beginning? Default: false\n- `pointerAtEnding` (Boolean) - Draw pointer at ending? Default: true\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Canvas\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Canvas(config)\n```\n\nCanvas Renderer constructor - wrapper around native canvas element.\n\n**Parameters:**\n- `width` (Number)\n- `height` (Number)\n- `pixelRatio` (Number)\n\n**Methods:**\n- `getContext()` - get canvas context (returns CanvasContext)\n- `getPixelRatio()` - get pixel ratio (returns Number)\n- `setPixelRatio(pixelRatio)` - set pixel ratio\n- `toDataURL(mimeType, quality)` - convert to data URL\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Circle\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Circle(config)\n```\n\nCircle constructor.\n\n**Parameters:**\n- `radius` (Number)\n- Plus all standard shape styling properties (fill, stroke, shadow, position, etc.)\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Container\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Container(config)\n```\n\nContainer constructor for containing nodes or other containers.\n\n**Parameters:**\n- Standard node properties (x, y, width, height, visible, listening, id, name, opacity, scale, rotation, offset, draggable, clip, etc.)\n\n**Methods:**\n- `getChildren(filterFunc)` - returns array of direct descendants\n- `hasChildren()` - returns Boolean\n- `removeChildren()` - remove all children (keeps in memory)\n- `destroyChildren()` - destroy all children nodes\n- `add(children)` - add child(ren) into container\n- `find(selector)` - return array of nodes matching selector (#id, .name, Type)\n- `findOne(selector)` - return first node matching selector\n- `isAncestorOf(node)` - determine if node is ancestor of descendant\n- `getAllIntersections(pos)` - get all shapes that intersect a point\n- `clip(clip)` - get/set clip region\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Context\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Context(config)\n```\n\nKonva wrapper around native 2d canvas context with additional API.\n\n**Methods:**\n- `fillShape(shape)` - fill shape\n- `strokeShape(shape)` - stroke shape\n- `fillStrokeShape(shape)` - fill then stroke\n- `reset()` - reset canvas context transform\n- `getCanvas()` - get canvas wrapper (returns Konva.Canvas)\n- `clear(bounds)` - clear canvas\n- All native 2d context methods: arc(), arcTo(), beginPath(), bezierCurveTo(), clearRect(), closePath(), createImageData(), createLinearGradient(), createPattern(), createRadialGradient(), drawImage(), ellipse(), isPointInPath(), fillRect(), strokeRect(), fillText(), measureText(), getImageData(), lineTo(), moveTo(), rect(), roundRect(), putImageData(), quadraticCurveTo(), restore(), rotate(), save(), scale(), setLineDash(), getLineDash(), setTransform(), stroke(), strokeText(), transform(), translate()\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Easings\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Namespace for easing functions.\n\n**Methods:**\n- `BackEaseIn()` - back ease in\n- `BackEaseOut()` - back ease out\n- `BackEaseInOut()` - back ease in out\n- `ElasticEaseIn()` - elastic ease in\n- `ElasticEaseOut()` - elastic ease out\n- `ElasticEaseInOut()` - elastic ease in out\n- `BounceEaseOut()` - bounce ease out\n- `BounceEaseIn()` - bounce ease in\n- `BounceEaseInOut()` - bounce ease in out\n- `EaseIn()` - ease in\n- `EaseOut()` - ease out\n- `EaseInOut()` - ease in out\n- `StrongEaseIn()` - strong ease in\n- `StrongEaseOut()` - strong ease out\n- `StrongEaseInOut()` - strong ease in out\n- `Linear()` - linear\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Ellipse\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Ellipse(config)\n```\n\nEllipse constructor.\n\n**Parameters:**\n- `radius` (Object) - defines x and y radius\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: FastLayer\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.FastLayer(config)\n```\n\n**DEPRECATED!** Use `Konva.Layer({ listening: false })` instead.\n\nFastLayer constructor for layers without node nesting, mouse/touch interactions, or event pub/sub. Renders ~2x faster than normal layers.\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Filters\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Namespace for image filters.\n\n**Available Filters:**\n\n1. **Blur(imageData)**\n   ```javascript\n   node.cache();\n   node.filters([Konva.Filters.Blur]);\n   node.blurRadius(10);\n   ```\n\n2. **Brighten(imageData)** - DEPRECATED\n   ```javascript\n   node.cache();\n   node.filters([Konva.Filters.Brighten]);\n   node.brightness(0.8);\n   ```\n\n3. **Brightness(imageData)** - CSS-compatible multiplicative brightness\n   ```javascript\n   node.cache();\n   node.filters([Konva.Filters.Brightness]);\n   node.brightness(1.5); // 50% brighter\n   ```\n\n4. **Contrast(imageData)**\n   ```javascript\n   node.cache();\n   node.filters([Konva.Filters.Contrast]);\n   node.contrast(10);\n   ```\n\n5. **Emboss(imageData)**\n   ```javascript\n   node.cache();\n   node.filters([Konva.Filters.Emboss]);\n   node.embossStrength(0.8);\n   node.embossWhiteLevel(0.3);\n   node.embossDirection('right');\n   node.embossBlend(true);\n   ```\n\n6. **Enhance(imageData)** - Adjusts colors to span widest range (0-255)\n   ```javascript\n   node.cache();\n   node.filters([Konva.Filters.Enhance]);\n   node.enhance(0.4);\n   ```\n\n7. **Grayscale(imageData)**\n   ```javascript\n   node.cache();\n   node.filters([Konva.Filters.Grayscale]);\n   ```\n\n8. **HSL(imageData)** - Adjust hue, saturation, luminance\n   ```javascript\n   image.filters([Konva.Filters.HSL]);\n   image.luminance(0.2);\n   ```\n\n9. **HSV(imageData)** - Adjust hue, saturation, value\n   ```javascript\n   image.filters([Konva.Filters.HSV]);\n   image.value(200);\n   ```\n\n10. **Invert(imageData)**\n    ```javascript\n    node.cache();\n    node.filters([Konva.Filters.Invert]);\n    ```\n\n11. **Mask(imageData)**\n    ```javascript\n    node.cache();\n    node.filters([Konva.Filters.Mask]);\n    node.threshold(200);\n    ```\n\n12. **Noise(imageData)** - Randomly adds/subtracts to color channels\n    ```javascript\n    node.cache();\n    node.filters([Konva.Filters.Noise]);\n    node.noise(0.8);\n    ```\n\n13. **Pixelate(imageData)** - Averages pixel groups\n    ```javascript\n    node.cache();\n    node.filters([Konva.Filters.Pixelate]);\n    node.pixelSize(10);\n    ```\n\n14. **Posterize(imageData)** - Limit channel values\n    ```javascript\n    node.cache();\n    node.filters([Konva.Filters.Posterize]);\n    node.levels(0.8); // between 0 and 1\n    ```\n\n15. **RGB(imageData)**\n    ```javascript\n    node.cache();\n    node.filters([Konva.Filters.RGB]);\n    node.blue(120);\n    node.green(200);\n    ```\n\n16. **RGBA(imageData)**\n    ```javascript\n    node.cache();\n    node.filters([Konva.Filters.RGBA]);\n    node.blue(120);\n    node.green(200);\n    node.alpha(0.3);\n    ```\n\n17. **Sepia(imageData)**\n    ```javascript\n    node.cache();\n    node.filters([Konva.Filters.Sepia]);\n    ```\n\n18. **Solarize(imageData)**\n    ```javascript\n    node.cache();\n    node.filters([Konva.Filters.Solarize]);\n    ```\n\n19. **Threshold(imageData)** - Pushes values above/below midpoint to max/min\n    ```javascript\n    node.cache();\n    node.filters([Konva.Filters.Threshold]);\n    node.threshold(0.1);\n    ```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Group\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Group(config)\n```\n\nGroup constructor for containing shapes or other groups.\n\n**Parameters:**\n- Standard container properties (x, y, width, height, visible, listening, id, name, opacity, scale, rotation, offset, draggable, clip, etc.)\n\n**Inherited Methods:** All Container methods (getChildren, add, find, etc.)\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Image\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Image(config)\n```\n\nImage constructor.\n\n**Parameters:**\n- `image` (Image) - HTML Image object\n- `crop` (Object) (optional) - crop region\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Label\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Label(config)\n```\n\nLabel constructor - groups containing Text and Tag shape.\n\n**Parameters:**\n- Standard group properties\n\n**Methods:**\n- `getText()` - get Text shape\n- `getTag()` - get Tag shape\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Layer\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Layer(config)\n```\n\nLayer constructor tied to own canvas element for containing groups or shapes.\n\n**Parameters:**\n- `clearBeforeDraw` (Boolean) (optional) - Default: true\n- Plus standard container properties\n\n**Methods:**\n- `getCanvas()` - get layer canvas wrapper\n- `getNativeCanvasElement()` - get native canvas element\n- `getHitCanvas()` - get layer hit canvas\n- `getContext()` - get layer canvas context\n- `width()` - get/set width (returns Number)\n- `height()` - get/set height (returns Number)\n- `batchDraw()` - schedule drawing to next tick (returns this)\n- `getIntersection(pos)` - get visible intersection shape (returns Konva.Node)\n- `enableHitGraph()` - DEPRECATED! Use layer.listening(true)\n- `disableHitGraph()` - DEPRECATED! Use layer.listening(false)\n- `toggleHitCanvas()` - Show/hide hit canvas for debugging\n- `imageSmoothingEnabled(enabled)` - get/set imageSmoothingEnabled flag\n- `clearBeforeDraw(clearBeforeDraw)` - get/set clearBeforeDraw flag\n- `hitGraphEnabled(enabled)` - DEPRECATED! Use layer.listening()\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Line\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Line(config)\n```\n\nLine constructor defined by array of points and tension.\n\n**Parameters:**\n- `points` (Array) - Flat array [x1, y1, x2, y2, x3, y3]\n- `tension` (Number) (optional) - Higher = more curvy. Default: 0\n- `closed` (Boolean) (optional) - Create polygon/blob\n- `bezier` (Boolean) (optional) - Draw as bezier using passed points\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Node\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Node(config)\n```\n\nNode constructor - base for entities that can be transformed, layered, and have bound events.\n\n**Parameters:**\n- `x`, `y` (Number) (optional)\n- `width`, `height` (Number) (optional)\n- `visible` (Boolean) (optional)\n- `listening` (Boolean) (optional)\n- `id` (String) (optional) - unique id\n- `name` (String) (optional) - non-unique name\n- `opacity` (Number) (optional) - between 0 and 1\n- `scale` (Object) (optional) - {x, y}\n- `scaleX`, `scaleY` (Number) (optional)\n- `rotation` (Number) (optional) - in degrees\n- `offset` (Object) (optional) - {x, y}\n- `offsetX`, `offsetY` (Number) (optional)\n- `draggable` (Boolean) (optional)\n- `dragDistance` (Number) (optional)\n- `dragBoundFunc` (function) (optional)\n\n**Methods:**\n- `clearCache()` - clear cached canvas (returns this)\n- `cache(config)` - cache node to improve performance\n  - config.x, config.y, config.width, config.height (optional)\n  - config.offset (Number) (optional) - increase canvas size\n  - config.drawBorder (Boolean) (optional) - draw red debug border\n  - config.pixelRatio (Number) (optional) - change cache quality\n  - config.imageSmoothingEnabled (Boolean) (optional)\n  - config.hitCanvasPixelRatio (Number) (optional)\n- `isCached()` - determine if node is cached (returns Boolean)\n- `getClientRect(config)` - return client rectangle {x, y, width, height}\n  - config.skipTransform, config.skipShadow, config.skipStroke (Boolean) (optional)\n  - config.relativeTo (Object) (optional)\n- `on(evtStr, handler)` - bind events (mouseover, mousemove, mouseout, mouseenter, mouseleave, mousedown, mouseup, wheel, contextmenu, click, dblclick, touchstart, touchmove, touchend, tap, dbltap, dragstart, dragmove, dragend)\n- `off(evtStr)` - remove event bindings\n- `fire(eventType, evt)` - trigger event\n- `draw()` - draw node\n- `getAttr(attr)` - get attribute\n- `setAttr(attr, val)` - set attribute\n- `setAttrs(attrs)` - set multiple attributes\n- `to(params)` - tween node to new state\n- `destroy()` - remove and destroy node\n- `remove()` - remove node from parent\n- `moveToTop()` - move to top of siblings\n- `moveToBottom()` - move to bottom\n- `moveUp()` - move up one position\n- `moveDown()` - move down one position\n- `zIndex(index)` - get/set zIndex\n- `getAbsolutePosition()` - get absolute position\n- `setAbsolutePosition(pos)` - set absolute position\n- `clone(attrs)` - clone node\n- `toJSON()` - convert to JSON string\n- `toObject()` - convert to object\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Path\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Path(config)\n```\n\nPath constructor for SVG paths.\n\n**Parameters:**\n- `data` (String) - SVG data string\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Rect\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Rect(config)\n```\n\nRectangle constructor.\n\n**Parameters:**\n- `cornerRadius` (Number or Array) (optional) - Can be number or [topLeft, topRight, bottomRight, bottomLeft]\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: RegularPolygon\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.RegularPolygon(config)\n```\n\nRegularPolygon constructor for triangles, squares, pentagons, hexagons, etc.\n\n**Parameters:**\n- `cornerRadius` (Number) (optional)\n- `sides` (Number)\n- `radius` (Number)\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Ring\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Ring(config)\n```\n\nRing constructor.\n\n**Parameters:**\n- `innerRadius` (Number)\n- `outerRadius` (Number)\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Shape\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Shape(config)\n```\n\nShape constructor for primitive objects.\n\n**Parameters:**\n- `fill` (String) (optional) - fill color\n- `fillPatternImage` (Image) (optional)\n- `fillPatternX`, `fillPatternY` (Number) (optional)\n- `fillPatternOffset` (Object) (optional)\n- `fillPatternScale` (Object) (optional)\n- `fillPatternRotation` (Number) (optional)\n- `fillPatternRepeat` (String) (optional) - \"repeat\", \"repeat-x\", \"repeat-y\", \"no-repeat\"\n- `fillLinearGradientStartPoint`, `fillLinearGradientEndPoint` (Object) (optional)\n- `fillLinearGradientColorStops` (Array) (optional)\n- `fillRadialGradientStartPoint`, `fillRadialGradientEndPoint` (Object) (optional)\n- `fillRadialGradientStartRadius`, `fillRadialGradientEndRadius` (Number) (optional)\n- `fillRadialGradientColorStops` (Array) (optional)\n- `fillEnabled` (Boolean) (optional) - Default: true\n- `fillPriority` (String) (optional) - \"color\", \"linear-gradient\", \"radial-gradient\", \"pattern\"\n- `stroke` (String) (optional) - stroke color\n- `strokeWidth` (Number) (optional)\n- `fillAfterStrokeEnabled` (Boolean) (optional) - Default: false\n- `hitStrokeWidth` (Number) (optional) - Default: \"auto\"\n- `strokeHitEnabled` (Boolean) (optional) - Default: true\n- `perfectDrawEnabled` (Boolean) (optional) - Default: true\n- `shadowForStrokeEnabled` (Boolean) (optional) - Default: true\n- `strokeScaleEnabled` (Boolean) (optional) - Default: true\n- `strokeEnabled` (Boolean) (optional) - Default: true\n- `lineJoin` (String) (optional) - \"miter\", \"round\", \"bevel\"\n- `lineCap` (String) (optional) - \"butt\", \"round\", \"square\"\n- `shadowColor` (String) (optional)\n- `shadowBlur` (Number) (optional)\n- `shadowOffset` (Object) (optional)\n- `shadowOpacity` (Number) (optional) - between 0 and 1\n- `shadowEnabled` (Boolean) (optional) - Default: true\n- `dash` (Array) (optional)\n- `dashEnabled` (Boolean) (optional) - Default: true\n- Plus all standard node properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Sprite\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Sprite(config)\n```\n\nSprite constructor for sprite animations.\n\n**Parameters:**\n- `animation` (String) - animation key\n- `animations` (Object) - animation map\n- `frameIndex` (Integer) (optional)\n- `image` (Image) - image object\n- `frameRate` (Integer) (optional)\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Stage\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Stage(config)\n```\n\nStage constructor to contain multiple layers.\n\n**Parameters:**\n- `container` (String|Element) - Container selector or DOM element\n- Plus standard container properties\n\n**Methods:**\n- `setContainer(container)` - set container DOM element\n- `clear()` - clear all layers\n- `getPointerPosition()` - returns ABSOLUTE pointer position (returns Vector2d|null)\n- `getIntersection(pos)` - get visible intersection shape (returns Konva.Node)\n- `getLayers()` - returns array of layers\n- `setPointersPositions(event)` - manually register pointers positions\n- `batchDraw()` - batch draw (returns this)\n- `container()` - get/set container DOM element\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Star\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Star(config)\n```\n\nStar constructor.\n\n**Parameters:**\n- `numPoints` (Integer)\n- `innerRadius` (Number)\n- `outerRadius` (Number)\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Tag\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Tag(config)\n```\n\nTag constructor with optional pointer element.\n\n**Parameters:**\n- `pointerDirection` (String) (optional) - \"up\", \"right\", \"down\", \"left\", \"none\"\n- `pointerWidth` (Number) (optional)\n- `pointerHeight` (Number) (optional)\n- `cornerRadius` (Number or Array) (optional)\n\n**Methods:**\n- `pointerDirection(direction)` - get/set pointer direction\n- `pointerWidth(width)` - get/set pointer width\n- `pointerHeight(height)` - get/set pointer height\n- `cornerRadius(radius)` - get/set corner radius (can be array)\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Text\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Text(config)\n```\n\nText constructor.\n\n**Parameters:**\n- `direction` (String) (optional) - Default: \"inherit\"\n- `fontFamily` (String) (optional) - Default: \"Arial\"\n- `fontSize` (Number) (optional) - Default: 12\n- `fontStyle` (String) (optional) - \"normal\", \"italic\", \"bold\", \"500\", \"italic bold\"\n- `fontVariant` (String) (optional) - \"normal\", \"small-caps\"\n- `textDecoration` (String) (optional) - \"line-through\", \"underline\", \"\"\n- `text` (String)\n- `align` (String) (optional) - \"left\", \"center\", \"right\", \"justify\"\n- `verticalAlign` (String) (optional) - \"top\", \"middle\", \"bottom\"\n- `padding` (Number) (optional)\n- `lineHeight` (Number) (optional) - Default: 1\n- `wrap` (String) (optional) - \"word\", \"char\", \"none\"\n- `ellipsis` (Boolean) (optional) - Default: false\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: TextPath\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.TextPath(config)\n```\n\nTextPath constructor for text along a path.\n\n**Parameters:**\n- `fontFamily` (String) (optional) - Default: \"Arial\"\n- `fontSize` (Number) (optional) - Default: 12\n- `fontStyle` (String) (optional)\n- `fontVariant` (String) (optional)\n- `textBaseline` (String) (optional) - \"top\", \"bottom\", \"middle\", \"alphabetic\", \"hanging\"\n- `text` (String)\n- `data` (String) - SVG data string\n- `kerningFunc` (function) - getter for kerning values\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Transform\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Transform(config)\n```\n\nTransform constructor for manual calculations.\n\n**Parameters:**\n- `m` (Array) (optional) - six-element matrix\n\n**Methods:**\n- `copy()` - copy Transform object (returns Konva.Transform)\n- `point(point)` - transform point (returns Object {x, y})\n- `translate(x, y)` - apply translation (returns this)\n- `scale(sx, sy)` - apply scale (returns this)\n- `rotate(rad)` - apply rotation in radians (returns this)\n- `getTranslation()` - returns translation (Object {x, y})\n- `skew(sx, sy)` - apply skew (returns this)\n- `multiply(matrix)` - transform multiplication (returns this)\n- `invert()` - invert the matrix (returns this)\n- `getMatrix()` - return matrix\n- `decompose()` - convert transformation matrix to node attributes (returns this)\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Transformer\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Transformer(config)\n```\n\nTransformer constructor for transforming primitives and shapes. Changes scaleX/scaleY, not width/height.\n\n**Parameters:**\n- `resizeEnabled` (Boolean) (optional) - Default: true\n- `rotateEnabled` (Boolean) (optional) - Default: true\n- `rotateLineVisible` (Boolean) (optional) - Default: true\n- `rotationSnaps` (Array) (optional) - angles for rotation snaps. Default: []\n- `rotationSnapTolerance` (Number) (optional) - Default: 5\n- `rotateAnchorOffset` (Number) (optional) - Default: 50\n- `rotateAnchorCursor` (String) (optional) - Default: \"crosshair\"\n- `padding` (Number) (optional) - Default: 0\n- `borderEnabled` (Boolean) (optional) - Default: true\n- `borderStroke` (String) (optional)\n- `borderStrokeWidth` (Number) (optional)\n- `borderDash` (Array) (optional)\n- `anchorFill` (String) (optional)\n- `anchorStroke` (String) (optional)\n- `anchorCornerRadius` (String) (optional)\n- `anchorStrokeWidth` (Number) (optional)\n- `anchorSize` (Number) (optional) - Default: 10\n- `keepRatio` (Boolean) (optional) - Default: true\n- `shiftBehavior` (String) (optional) - Default: \"default\"\n- `centeredScaling` (Boolean) (optional) - Default: false\n- `enabledAnchors` (Array) (optional)\n- `flipEnabled` (Boolean) (optional) - Default: true\n- `boundBoxFunc` (function) (optional)\n- `ignoreStroke` (function) (optional) - Default: false\n- `useSingleNodeRotation` (Boolean) (optional)\n- `shouldOverdrawWholeArea` (Boolean) (optional)\n\n**Methods:**\n- `attachTo()` - alias to tr.nodes([shape]) - DEPRECATED\n- `getActiveAnchor()` - return name of current active anchor\n- `detach()` - detach from attached node (returns this)\n- `on(evtStr, handler)` - bind events (transform, transformstart, transformend, dragstart, dragmove, dragend)\n- `forceUpdate()` - force update of transformer\n- `isTransforming()` - determine if transformer is in active transform (returns Boolean)\n- `stopTransform()` - stop active transform action (returns Boolean)\n- `enabledAnchors(array)` - get/set enabled handlers\n- `flipEnabled(flag)` - get/set flip enabled\n- `resizeEnabled(enabled)` - get/set resize ability\n- `anchorSize(size)` - get/set anchor size\n- `rotateEnabled(enabled)` - get/set ability to rotate\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Tween\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Tween(config)\n```\n\nTween constructor for animating nodes between states. Default easing is linear.\n\n**Methods:**\n- `play()` - play (returns Tween)\n- `reverse()` - reverse (returns Tween)\n- `reset()` - reset (returns Tween)\n- `seek(t)` - seek to time in seconds (returns Tween)\n- `pause()` - pause (returns Tween)\n- `finish()` - finish (returns Tween)\n- `destroy()` - destroy\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Util\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Utility namespace.\n\n**Methods:**\n- `getRandomColor()` - return random hex color\n- `getRGB(color)` - get RGB components {r, g, b}\n- `haveIntersection(r1, r2)` - check intersection of two client rectangles\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Wedge\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nnew Konva.Wedge(config)\n```\n\nWedge (pie piece) constructor.\n\n**Parameters:**\n- `angle` (Number) - in degrees\n- `radius` (Number)\n- `clockwise` (Boolean) (optional)\n- Plus all standard shape styling properties\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Rectangle\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create a rectangle:\n\n```javascript\nconst rect = new Konva.Rect({\n  x: 20,\n  y: 20,\n  width: 100,\n  height: 50,\n  fill: 'green',\n  stroke: 'black',\n  strokeWidth: 4,\n  cornerRadius: 10 // Can be number or array [topLeft, topRight, bottomRight, bottomLeft]\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Circle\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create a circle:\n\n```javascript\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Ellipse\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create an ellipse:\n\n```javascript\nconst ellipse = new Konva.Ellipse({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radiusX: 100,\n  radiusY: 50,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Star\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create a star:\n\n```javascript\nconst star = new Konva.Star({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  numPoints: 5,\n  innerRadius: 30,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Line - Simple Line\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create a simple line:\n\n```javascript\nconst line = new Konva.Line({\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'red',\n  strokeWidth: 15,\n  lineCap: 'round',\n  lineJoin: 'round'\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Line - Polygon\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create a polygon (closed line):\n\n```javascript\nconst polygon = new Konva.Line({\n  points: [73, 192, 73, 160, 340, 23, 500, 109, 499, 139, 342, 93],\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 5,\n  closed: true\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Line - Spline\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create a spline (curved line):\n\n```javascript\nconst spline = new Konva.Line({\n  points: [5, 70, 140, 23, 250, 60, 300, 20],\n  stroke: 'red',\n  strokeWidth: 15,\n  lineCap: 'round',\n  lineJoin: 'round',\n  tension: 1\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Line - Blob\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create a blob (closed curved line):\n\n```javascript\nconst blob = new Konva.Line({\n  points: [23, 20, 23, 160, 70, 93, 150, 109, 290, 139, 270, 93],\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 5,\n  closed: true,\n  tension: 0.3\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Arrow\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create an arrow:\n\n```javascript\nconst arrow = new Konva.Arrow({\n  x: stage.width() / 4,\n  y: stage.height() / 4,\n  points: [0, 0, 100, 100],\n  pointerLength: 20,\n  pointerWidth: 20,\n  fill: 'black',\n  stroke: 'black',\n  strokeWidth: 4\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Path\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create a custom path using SVG data:\n\n```javascript\nconst path = new Konva.Path({\n  x: 50,\n  y: 50,\n  data: 'M12.582,9.551C3.251,16.237...',\n  fill: 'green',\n  scale: { x: 2, y: 2 }\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Wedge\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create a wedge (pie piece):\n\n```javascript\nconst wedge = new Konva.Wedge({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  angle: 60,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  rotation: -120\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Image\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create an image:\n\n```javascript\nconst imageObj = new Image();\nimageObj.onload = function() {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    width: 106,\n    height: 118\n  });\n  layer.add(image);\n};\nimageObj.src = 'path/to/image.jpg';\n\n// Alternative API:\nKonva.Image.fromURL('path/to/image.jpg', function(imageNode) {\n  imageNode.setAttrs({\n    x: 200,\n    y: 50,\n    scaleX: 0.5,\n    scaleY: 0.5\n  });\n  layer.add(imageNode);\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Text\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create text:\n\n```javascript\nconst text = new Konva.Text({\n  x: 20,\n  y: 60,\n  text: 'Hello World!',\n  fontSize: 18,\n  fontFamily: 'Calibri',\n  fill: '#555',\n  width: 300,\n  padding: 20,\n  align: 'center'\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Sprite\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create an animated sprite:\n\n```javascript\nconst animations = {\n  idle: [2, 2, 70, 119, 71, 2, 74, 119],\n  punch: [2, 138, 74, 122, 76, 138, 84, 122]\n};\n\nconst sprite = new Konva.Sprite({\n  x: 50,\n  y: 50,\n  image: imageObj,\n  animation: 'idle',\n  animations: animations,\n  frameRate: 7,\n  frameIndex: 0\n});\n\nsprite.start();\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Custom Shape\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create a custom shape:\n\n```javascript\nconst triangle = new Konva.Shape({\n  sceneFunc: function(context, shape) {\n    context.beginPath();\n    context.moveTo(20, 50);\n    context.lineTo(220, 80);\n    context.lineTo(100, 150);\n    context.closePath();\n    // Konva specific method\n    context.fillStrokeShape(shape);\n  },\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4\n});\n```\n\n**Best practices for custom shapes:**\n1. Optimize - function called many times per second\n2. No side effects - don't move shapes, attach events, or change app state\n3. Define custom hitFunc when applying complex styles or images\n4. Don't manually apply position/scaling - let Konva handle it\n5. Use context.fillStrokeShape(shape) for styling\n6. Reference Konva core shapes for examples\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Fill\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Konva supports colors, patterns, linear gradients, and radial gradients for fills.\n\n**Color Fill:**\n```javascript\npentagon.fill('blue');\n```\n\n**Pattern Fill:**\n```javascript\nconst pattern = new Konva.RegularPolygon({\n  fillPatternImage: imageObj,\n  fillPatternOffset: { x: -220, y: 70 }\n});\n```\n\n**Linear Gradient:**\n```javascript\nconst gradient = new Konva.RegularPolygon({\n  fillLinearGradientStartPoint: { x: -50, y: -50 },\n  fillLinearGradientEndPoint: { x: 50, y: 50 },\n  fillLinearGradientColorStops: [0, 'red', 1, 'yellow']\n});\n```\n\n**Radial Gradient:**\n```javascript\nconst radial = new Konva.RegularPolygon({\n  fillRadialGradientStartPoint: { x: 0, y: 0 },\n  fillRadialGradientStartRadius: 0,\n  fillRadialGradientEndPoint: { x: 0, y: 0 },\n  fillRadialGradientEndRadius: 70,\n  fillRadialGradientColorStops: [0, 'red', 0.5, 'yellow', 1, 'blue']\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Stroke\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To set stroke color and width:\n\n```javascript\npentagon.stroke('blue');\npentagon.strokeWidth(20);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Opacity\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Set opacity between 0 (fully transparent) and 1 (fully opaque):\n\n```javascript\nshape.opacity(0.5);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Shadow\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To apply shadows:\n\n```javascript\nconst shape = new Konva.Rect({\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowOffset: { x: 10, y: 10 },\n  shadowOpacity: 0.5\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Line Join\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Set line join style to miter, bevel, or round:\n\n```javascript\ntriangle.lineJoin('round');\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Hide and Show\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To hide and show shapes:\n\n```javascript\nrect.hide();\nrect.show();\n// or\nrect.visible(false);\nrect.visible(true);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Mouse Cursor\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To change mouse cursor:\n\n```javascript\npentagon.on('mouseover', function(e) {\n  e.target.getStage().container().style.cursor = 'pointer';\n});\n\npentagon.on('mouseout', function(e) {\n  e.target.getStage().container().style.cursor = 'default';\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Blend Mode\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Set blending mode using `globalCompositeOperation`:\n\n```javascript\nconst rect = new Konva.Rect({\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'red',\n  draggable: true,\n  globalCompositeOperation: 'xor'\n});\n```\n\n**Available blend modes:**\n- `source-over` (default)\n- `source-in`\n- `source-out`\n- `source-atop`\n- `destination-over`\n- `destination-in`\n- `destination-out`\n- `destination-atop`\n- `lighter`\n- `copy`\n- `xor`\n- `multiply`\n- `screen`\n- `overlay`\n- `darken`\n- `lighten`\n- `color-dodge`\n- `color-burn`\n- `hard-light`\n- `soft-light`\n- `difference`\n- `exclusion`\n- `hue`\n- `saturation`\n- `color`\n- `luminosity`\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Binding Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To bind events to shapes:\n\n```javascript\n// Mouse events\nshape.on('mouseover', handler);\nshape.on('mouseout', handler);\nshape.on('mouseenter', handler);\nshape.on('mouseleave', handler);\nshape.on('mousemove', handler);\nshape.on('mousedown', handler);\nshape.on('mouseup', handler);\nshape.on('wheel', handler);\nshape.on('click', handler);\nshape.on('dblclick', handler);\n\n// Touch events\nshape.on('touchstart', handler);\nshape.on('touchmove', handler);\nshape.on('touchend', handler);\nshape.on('tap', handler);\nshape.on('dbltap', handler);\n\n// Pointer events\nshape.on('pointerdown', handler);\nshape.on('pointermove', handler);\nshape.on('pointerup', handler);\nshape.on('pointercancel', handler);\nshape.on('pointerover', handler);\nshape.on('pointerenter', handler);\nshape.on('pointerout', handler);\nshape.on('pointerleave', handler);\nshape.on('pointerclick', handler);\nshape.on('pointerdblclick', handler);\n\n// Drag events\nshape.on('dragstart', handler);\nshape.on('dragmove', handler);\nshape.on('dragend', handler);\n\n// Transform events\nshape.on('transformstart', handler);\nshape.on('transform', handler);\nshape.on('transformend', handler);\n\n// Attribute change events\nshape.on('xChange', handler);\nshape.on('fillChange', handler);\n// etc.\n\n// Multiple events\nshape.on('mouseenter mouseleave', handler);\n\n// Namespaced events\nshape.on('click.namespace', handler);\n```\n\n**Get Pointer Position:**\n```javascript\nconst mousePos = stage.getPointerPosition();\nconsole.log(mousePos.x, mousePos.y);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Cancel Event Propagation\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To cancel event bubble propagation, set the `cancelBubble` property to true:\n\n```javascript\ncircle.on('click', function (evt) {\n  alert('You clicked on the circle');\n  // stop event bubble\n  evt.cancelBubble = true;\n});\n\nlayer.on('click', function () {\n  alert('You clicked on the layer'); // Won't trigger if circle clicked\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Custom Hit Region\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Using hitFunc:**\n\nCustom hit detection function for easier interaction or better performance:\n\n```javascript\nstar.hitFunc(function (context) {\n  context.beginPath();\n  context.arc(0, 0, 70, 0, Math.PI * 2, true);\n  context.closePath();\n  context.fillStrokeShape(this);\n});\n```\n\n**Using hitStrokeWidth:**\n\nMake lines easier to interact with:\n\n```javascript\nconst line = new Konva.Line({\n  points: [-50, -50, 50, 50],\n  stroke: 'black',\n  strokeWidth: 2,\n  hitStrokeWidth: 20 // Larger hit area\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Desktop and Mobile Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Use paired events for cross-platform compatibility:\n\n```javascript\n// Works on both desktop and mobile\ncircle.on('mousedown touchstart', function () {\n  writeMessage('Mousedown or touchstart');\n});\n\ncircle.on('mouseup touchend', function () {\n  writeMessage('Mouseup or touchend');\n});\n```\n\n**Note:** Modern browsers support pointer events, which are recommended for cross-platform apps."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Event Delegation\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Get the event target to implement delegation:\n\n```javascript\nlayer.on('click', function (evt) {\n  const shape = evt.target;\n  console.log('click on ' + shape.getClassName());\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Fire Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Programmatically trigger events:\n\n```javascript\n// Fire built-in events\ncircle.fire('click');\n\n// Fire custom events\ncircle.on('customEvent', function (evt) {\n  alert('custom event fired');\n});\n\ncircle.fire('customEvent', {\n  bubbles: true\n});\n```\n\n**Note:** It's generally better to use built-in interaction events rather than custom events."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Image Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Detect events only on non-transparent pixels using `drawHitFromCache()`:\n\n```javascript\nconst lion = new Konva.Image({\n  x: 320,\n  y: 50,\n  image: imageObj,\n  width: 200,\n  height: 200\n});\n\nlion.on('mouseover', function () {\n  console.log('mouseover lion');\n});\n\n// Create precise hit region (ignores transparent pixels)\nlion.cache();\nlion.drawHitFromCache();\n```\n\n**Note:** Requires image to be hosted on same domain or with CORS enabled."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Keyboard Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Konva doesn't have built-in keyboard events. Add them via:\n\n**1. Listen to window:**\n```javascript\nwindow.addEventListener('keydown', (e) => {\n  // Handle keyboard\n});\n```\n\n**2. Make stage container focusable:**\n```javascript\nstage.container().tabIndex = 1;\nstage.container().focus();\n\nstage.container().addEventListener('keydown', (e) => {\n  if (e.keyCode === 37) { // left arrow\n    circle.x(circle.x() - 10);\n  }\n  // ... other keys\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Listen for Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Control whether nodes listen to events:\n\n```javascript\noval.listening(false); // Disable event listening\noval.listening(true);  // Enable event listening\n\n// Must redraw hit graph after changing\nlayer.drawHit();\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Mobile Touch Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Bind touch-specific events:\n\n```javascript\ntriangle.on('touchmove', function () {\n  const touchPos = stage.getPointerPosition();\n  console.log('x: ' + touchPos.x + ', y: ' + touchPos.y);\n});\n\ncircle.on('touchstart', function () {\n  console.log('touchstart circle');\n});\n\ncircle.on('touchend', function () {\n  console.log('touchend circle');\n});\n```\n\nSupported mobile events: `touchstart`, `touchmove`, `touchend`, `tap`, `dbltap`, `dragstart`, `dragmove`, `dragend`"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Mobile Scrolling\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Control whether shapes prevent default scrolling behavior:\n\n```javascript\n// Green rectangle - prevents scrolling (default)\nconst greenRect = new Konva.Rect({\n  fill: 'green',\n  // preventDefault: true (default)\n});\n\n// Red rectangle - allows native scrolling\nconst redRect = new Konva.Rect({\n  fill: 'red',\n  preventDefault: false\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Multi-Event Binding\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Bind multiple events to one handler:\n\n```javascript\ncircle.on('mouseover mousedown mouseup', function (evt) {\n  console.log('event: ' + evt.type);\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Pointer Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Use pointer events for unified desktop/mobile handling:\n\n```javascript\ntriangle.on('pointermove', function () {\n  const pos = stage.getPointerPosition();\n  console.log('x: ' + pos.x + ', y: ' + pos.y);\n});\n```\n\nSupported pointer events: `pointerdown`, `pointermove`, `pointerup`, `pointercancel`, `pointerover`, `pointerenter`, `pointerout`, `pointerleave`, `pointerclick`, `pointerdblclick`"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Remove Event Listener\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Remove event bindings:\n\n```javascript\n// Remove all click listeners\ncircle.off('click');\n\n// Remove specific listener\ncircle.off('click', myHandler);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Remove Event by Name\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Use namespaced events for selective removal:\n\n```javascript\ncircle.on('click.event1', function () {\n  alert('first click listener');\n});\n\ncircle.on('click.event2', function () {\n  alert('second click listener');\n});\n\n// Remove only first listener\ncircle.off('click.event1');\n\n// Remove only second listener\ncircle.off('click.event2');\n```\n\n**Note:** Event namespacing is vanilla JS feature, not recommended for React/Vue."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Stage Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Events on empty stage areas trigger on Stage, not Layer:\n\n```javascript\nstage.on('click', function (e) {\n  if (e.target === stage) {\n    console.log('clicked on empty stage');\n    return;\n  }\n  console.log('clicked on ' + e.target.name());\n});\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Basic Drag and Drop\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To enable drag and drop:\n\n```javascript\nconst shape = new Konva.Circle({\n  draggable: true\n});\n\n// or\nshape.draggable(true);\n\n// Add cursor styling\nshape.on('mouseover', function() {\n  document.body.style.cursor = 'pointer';\n});\n\nshape.on('mouseout', function() {\n  document.body.style.cursor = 'default';\n});\n```\n\n**Note:** Draggable works automatically for both desktop and mobile applications."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Drag an Image\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Images can be made draggable just like any other shape:\n\n```javascript\nconst yoda = new Konva.Image({\n  x: 50,\n  y: 50,\n  image: imageObj,\n  width: 106,\n  height: 118,\n  draggable: true\n});\n\n// Add cursor styling\nyoda.on('mouseover', function () {\n  document.body.style.cursor = 'pointer';\n});\n\nyoda.on('mouseout', function () {\n  document.body.style.cursor = 'default';\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Drag a Group\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Groups can be dragged, moving all children together:\n\n```javascript\nconst group = new Konva.Group({\n  draggable: true\n});\n\n// Add shapes to group\ngroup.add(box1);\ngroup.add(box2);\ngroup.add(box3);\n\n// Add cursor styling\ngroup.on('mouseover', function () {\n  document.body.style.cursor = 'move';\n});\n\ngroup.on('mouseout', function () {\n  document.body.style.cursor = 'default';\n});\n```\n\n**Note:** Dragging a group does NOT change x and y of children. Only the group's position changes."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Drag a Line\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Lines can be dragged:\n\n```javascript\nconst redLine = new Konva.Line({\n  x: 50,\n  y: 50,\n  points: [0, 0, 150, 0],\n  stroke: 'red',\n  strokeWidth: 15,\n  draggable: true\n});\n```\n\n**Note:** Dragging a line will NOT change the `points` property. Instead, `x` and `y` properties of the line are changed."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Drag the Stage\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "The entire stage can be made draggable:\n\n```javascript\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n  draggable: true\n});\n```\n\n**Note:** Unlike other nodes, you can drag the stage by dragging ANY portion of it."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Drag Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nshape.on('dragstart', function() {\n  console.log('drag started');\n});\n\nshape.on('dragmove', function() {\n  console.log('dragging');\n});\n\nshape.on('dragend', function() {\n  console.log('drag ended');\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Simple Drag Bounds\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Constrain drag movement using the `dragmove` event:\n\n**Horizontal only:**\n```javascript\nhorizontalText.on('dragmove', function () {\n  this.y(50); // Lock y position\n});\n```\n\n**Vertical only:**\n```javascript\nverticalText.on('dragmove', function () {\n  this.x(200); // Lock x position\n});\n```\n\n**Tip:** Use `shape.absolutePosition()` to get/set absolute position instead of relative x and y."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Complex Drag Bounds\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Use `dragBoundFunc` for complex constraints:\n\n```javascript\nshape.dragBoundFunc(function(pos) {\n  // Constrain to box\n  const x = Math.max(0, Math.min(pos.x, stageWidth - shapeWidth));\n  const y = Math.max(0, Math.min(pos.y, stageHeight - shapeHeight));\n  return { x, y };\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Drop Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Konva doesn't have built-in drop events, but you can implement them:\n\n```javascript\nconst layer = new Konva.Layer();\nconst tempLayer = new Konva.Layer(); // For dragging objects\n\nstar.on('dragstart', () => {\n  star.moveTo(tempLayer); // Move to temp layer while dragging\n});\n\nstar.on('dragmove', (e) => {\n  const pos = stage.getPointerPosition();\n  const shape = layer.getIntersection(pos);\n  \n  if (shape) {\n    shape.fire('dragenter', { evt: e.evt }, true);\n  }\n});\n\nstar.on('dragend', (e) => {\n  const pos = stage.getPointerPosition();\n  const shape = layer.getIntersection(pos);\n  \n  if (shape) {\n    shape.fire('drop', { evt: e.evt }, true);\n  }\n  \n  star.moveTo(layer); // Move back to main layer\n});\n\n// Listen for custom drop events\ntargetShape.on('dragenter', () => {\n  targetShape.fill('green');\n});\n\ntargetShape.on('dragleave', () => {\n  targetShape.fill('blue');\n});\n\ntargetShape.on('drop', () => {\n  targetShape.fill('red');\n});\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Basic Transformer\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To enable selection, resizing, and rotation:\n\n```javascript\n// Create shapes\nconst rect = new Konva.Rect({\n  x: 60,\n  y: 60,\n  width: 100,\n  height: 90,\n  fill: 'red',\n  draggable: true\n});\n\n// Create transformer\nconst tr = new Konva.Transformer();\nlayer.add(tr);\n\n// Attach to shape\ntr.nodes([rect]);\n\n// Or use selection logic\nstage.on('click', function(e) {\n  if (e.target === stage) {\n    tr.nodes([]);\n    return;\n  }\n  tr.nodes([e.target]);\n});\n```\n\n**Note:** Transformer changes scaleX/scaleY properties, not width/height."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Multi-Selection\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Select multiple shapes with SHIFT/CTRL:\n\n```javascript\nstage.on('click tap', function (e) {\n  // If click on empty area - remove all selections\n  if (e.target === stage) {\n    tr.nodes([]);\n    return;\n  }\n\n  // Do we pressed shift or ctrl?\n  const metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;\n  const isSelected = tr.nodes().indexOf(e.target) >= 0;\n\n  if (!metaPressed && !isSelected) {\n    // Select just one\n    tr.nodes([e.target]);\n  } else if (metaPressed && isSelected) {\n    // Remove from selection\n    const nodes = tr.nodes().slice();\n    nodes.splice(nodes.indexOf(e.target), 1);\n    tr.nodes(nodes);\n  } else if (metaPressed && !isSelected) {\n    // Add to selection\n    const nodes = tr.nodes().concat([e.target]);\n    tr.nodes(nodes);\n  }\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Selection Rectangle\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Implement drag-to-select:\n\n```javascript\nlet selectionRectangle = new Konva.Rect({\n  fill: 'rgba(0,0,255,0.5)',\n  visible: false\n});\nlayer.add(selectionRectangle);\n\nlet x1, y1, x2, y2;\n\nstage.on('mousedown touchstart', (e) => {\n  if (e.target !== stage) return;\n  \n  x1 = stage.getPointerPosition().x;\n  y1 = stage.getPointerPosition().y;\n  \n  selectionRectangle.setAttrs({\n    x: x1,\n    y: y1,\n    width: 0,\n    height: 0,\n    visible: true\n  });\n});\n\nstage.on('mousemove touchmove', () => {\n  if (!selectionRectangle.visible()) return;\n  \n  x2 = stage.getPointerPosition().x;\n  y2 = stage.getPointerPosition().y;\n  \n  selectionRectangle.setAttrs({\n    x: Math.min(x1, x2),\n    y: Math.min(y1, y2),\n    width: Math.abs(x2 - x1),\n    height: Math.abs(y2 - y1)\n  });\n});\n\nstage.on('mouseup touchend', () => {\n  if (!selectionRectangle.visible()) return;\n  \n  setTimeout(() => {\n    selectionRectangle.visible(false);\n  });\n  \n  const shapes = stage.find('.selectable');\n  const box = selectionRectangle.getClientRect();\n  \n  const selected = shapes.filter((shape) =>\n    Konva.Util.haveIntersection(box, shape.getClientRect())\n  );\n  \n  tr.nodes(selected);\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Centered Scaling\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Resize from center instead of corners:\n\n```javascript\nconst tr = new Konva.Transformer({\n  nodes: [text],\n  centeredScaling: true\n});\n```\n\n**Tip:** Even if `centeredScaling` is false, holding ALT key enables centered scaling."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Keep Ratio\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Control aspect ratio preservation:\n\n```javascript\n// Keep ratio by default (default behavior)\nconst tr1 = new Konva.Transformer({\n  nodes: [shape1]\n});\n\n// Don't keep ratio\nconst tr2 = new Konva.Transformer({\n  nodes: [shape2],\n  keepRatio: false\n});\n```\n\n**Tips:**\n- By default, corner anchors preserve ratio\n- Set `keepRatio: false` to allow free resizing\n- Hold SHIFT to temporarily keep ratio even when `keepRatio: false`"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Transformer Styling\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Customize transformer appearance with various styling properties.\n\n**Vanilla JavaScript Example:**\n\n```javascript\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\n  x: 60,\n  y: 60,\n  width: 100,\n  height: 90,\n  fill: 'red',\n  name: 'rect',\n  draggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\n  nodes: [rect],\n  // Border styling\n  borderStroke: 'black',\n  borderStrokeWidth: 3,\n  // Anchor styling\n  anchorFill: 'white',\n  anchorStroke: 'black',\n  anchorStrokeWidth: 2,\n  anchorSize: 20,\n  // Make anchors circular\n  anchorCornerRadius: 50,\n});\nlayer.add(tr);\n```\n\n**React Example:**\n\n```javascript\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={60}\n          y={60}\n          width={100}\n          height={90}\n          fill=\"red\"\n          draggable\n          ref={rectRef}\n        />\n        <Transformer\n          ref={trRef}\n          borderStroke=\"black\"\n          borderStrokeWidth={3}\n          anchorFill=\"white\"\n          anchorStroke=\"black\"\n          anchorStrokeWidth={2}\n          anchorSize={20}\n          anchorCornerRadius={50}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n**Available Styling Properties:**\n- `borderStroke` - Border color (default: 'rgb(0, 161, 255)')\n- `borderStrokeWidth` - Border thickness (default: 1)\n- `borderDash` - Border dash pattern (e.g., [4, 4])\n- `anchorFill` - Anchor fill color\n- `anchorStroke` - Anchor stroke color\n- `anchorStrokeWidth` - Anchor stroke width\n- `anchorSize` - Anchor size in pixels\n- `anchorCornerRadius` - Anchor corner radius (50 makes circular)\n- `rotateAnchorOffset` - Distance of rotation anchor from shape\n- `rotateAnchorCursor` - CSS cursor for rotation anchor\n- `enabledAnchors` - Array of enabled anchors\n- `padding` - Padding around shape"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Transform Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Transformer emits three key events during transformation operations. These events fire on BOTH the Transformer object AND the attached node(s).\n\n**Event Types:**\n- `transformstart` - Fires when transformation begins\n- `transform` - Fires continuously during transformation\n- `transformend` - Fires when transformation completes\n\n**Vanilla JavaScript Example:**\n\n```javascript\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\n  x: 60,\n  y: 60,\n  width: 100,\n  height: 90,\n  fill: 'red',\n  draggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\n  nodes: [rect],\n});\nlayer.add(tr);\n\n// Events on transformer\ntr.on('transformstart', () => {\n  console.log('transformer: transformstart');\n});\n\ntr.on('transform', () => {\n  console.log('transformer: transform');\n});\n\ntr.on('transformend', () => {\n  console.log('transformer: transformend');\n});\n\n// Events on shape\nrect.on('transformstart', () => {\n  console.log('rect: transformstart');\n});\n\nrect.on('transform', () => {\n  console.log('rect: transform');\n});\n\nrect.on('transformend', () => {\n  console.log('rect: transformend');\n});\n```\n\n**React Example:**\n\n```javascript\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={60}\n          y={60}\n          width={100}\n          height={90}\n          fill=\"red\"\n          draggable\n          ref={rectRef}\n          onTransformStart={() => console.log('rect: transformstart')}\n          onTransform={() => console.log('rect: transform')}\n          onTransformEnd={() => console.log('rect: transformend')}\n        />\n        <Transformer\n          ref={trRef}\n          onTransformStart={() => console.log('transformer: transformstart')}\n          onTransform={() => console.log('transformer: transform')}\n          onTransformEnd={() => console.log('transformer: transformend')}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n**Use Cases:**\n- Track user transformations\n- Save state changes during transformation\n- Trigger actions based on transform state\n- Implement undo/redo functionality\n- Update UI elements based on shape properties\n- Validate transformations before completion"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Resize Limits\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Use `boundBoxFunc` to constrain resize and transform behavior. This function receives the old and new bounding box parameters and returns the final box dimensions.\n\n**Function Signature:**\n```javascript\nboundBoxFunc: (oldBox, newBox) => {\n  // oldBox and newBox contain: {x, y, width, height, rotation}\n  // Return oldBox to reject transformation\n  // Return newBox to accept transformation\n  // Return modified box for custom constraints\n  return modifiedBox;\n}\n```\n\n**Vanilla JavaScript Example (Limit Maximum Width):**\n\n```javascript\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\n  x: 60,\n  y: 60,\n  width: 100,\n  height: 90,\n  fill: 'red',\n  draggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\n  nodes: [rect],\n  boundBoxFunc: (oldBox, newBox) => {\n    // Limit width to maximum 200px\n    if (newBox.width > 200) {\n      return oldBox; // Reject transformation\n    }\n    return newBox; // Accept transformation\n  },\n});\nlayer.add(tr);\n```\n\n**React Example:**\n\n```javascript\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  const handleBoundBox = (oldBox, newBox) => {\n    if (newBox.width > 200) {\n      return oldBox;\n    }\n    return newBox;\n  };\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={60}\n          y={60}\n          width={100}\n          height={90}\n          fill=\"red\"\n          draggable\n          ref={rectRef}\n        />\n        <Transformer ref={trRef} boundBoxFunc={handleBoundBox} />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n**Common Use Cases:**\n- Limit minimum/maximum size\n- Enforce aspect ratios\n- Constrain to specific dimensions\n- Prevent transformations outside boundaries\n- Create custom transformation rules\n\n**Note:** Works similarly to `dragBoundFunc` for drag operations."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Resize Snaps\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Use `anchorDragBoundFunc` to snap anchor positions during resize operations. This enables magnetic snapping to guide lines or grid positions.\n\n**Function Signature:**\n```javascript\nanchorDragBoundFunc: (oldAbsPos, newAbsPos, event) => {\n  // Return constrained position {x, y}\n  return { x: constrainedX, y: constrainedY };\n}\n```\n\n**Vanilla JavaScript Example (Snap to Center Line):**\n\n```javascript\nimport Konva from 'konva';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: width,\n  height: height,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Create guide lines\nconst verticalLine = new Konva.Line({\n  points: [width / 2, 0, width / 2, height],\n  stroke: 'rgb(0, 161, 255)',\n  strokeWidth: 1,\n  dash: [4, 6],\n});\nlayer.add(verticalLine);\n\nconst horizontalLine = new Konva.Line({\n  points: [0, height / 2, width, height / 2],\n  stroke: 'rgb(0, 161, 255)',\n  strokeWidth: 1,\n  dash: [4, 6],\n});\nlayer.add(horizontalLine);\n\nconst rect = new Konva.Rect({\n  x: 60,\n  y: 60,\n  width: 100,\n  height: 90,\n  fill: 'red',\n  draggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\n  nodes: [rect],\n  anchorDragBoundFunc: (oldPos, newPos, event) => {\n    // Calculate distance to vertical center line\n    const dist = Math.sqrt(\n      Math.pow(newPos.x - width / 2, 2)\n    );\n    \n    // Snap when within 10px of center line\n    if (dist < 10) {\n      return {\n        x: width / 2,\n        y: newPos.y,\n      };\n    }\n    \n    return newPos;\n  },\n});\nlayer.add(tr);\n```\n\n**React Example:**\n\n```javascript\nimport { Stage, Layer, Rect, Line, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  const handleAnchorDrag = (oldPos, newPos) => {\n    const dist = Math.sqrt(Math.pow(newPos.x - width / 2, 2));\n    \n    if (dist < 10) {\n      return {\n        x: width / 2,\n        y: newPos.y,\n      };\n    }\n    \n    return newPos;\n  };\n\n  return (\n    <Stage width={width} height={height}>\n      <Layer>\n        <Line\n          points={[width / 2, 0, width / 2, height]}\n          stroke=\"rgb(0, 161, 255)\"\n          strokeWidth={1}\n          dash={[4, 6]}\n        />\n        <Line\n          points={[0, height / 2, width, height / 2]}\n          stroke=\"rgb(0, 161, 255)\"\n          strokeWidth={1}\n          dash={[4, 6]}\n        />\n        <Rect\n          x={60}\n          y={60}\n          width={100}\n          height={90}\n          fill=\"red\"\n          draggable\n          ref={rectRef}\n        />\n        <Transformer ref={trRef} anchorDragBoundFunc={handleAnchorDrag} />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n**Use Cases:**\n- Grid snapping during resize\n- Alignment to guide lines\n- Proportional resizing constraints\n- Custom snap points\n- Magnetic positioning behavior\n- Precise shape alignment\n\n**Distance Calculation:**\n```javascript\n// Distance from point to vertical line\nconst distX = Math.sqrt(Math.pow(newPos.x - targetX, 2));\n\n// Distance from point to horizontal line\nconst distY = Math.sqrt(Math.pow(newPos.y - targetY, 2));\n\n// Full 2D distance\nconst dist = Math.sqrt(\n  Math.pow(newPos.x - targetX, 2) + \n  Math.pow(newPos.y - targetY, 2)\n);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Rotation Snaps\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Enable snapping to specific rotation angles using `rotationSnaps` and `rotationSnapTolerance`. Snapping makes rotation \"sticky\" near provided values, similar to rounding.\n\n**How it Works:**\n- If rotation is within tolerance of a snap point, it snaps to that exact value\n- If rotation is too far from all snap points, it moves freely\n- Most common snap points: 0°, 45°, 90°, 135°, 180°, 225°, 270°, 315°\n\n**Vanilla JavaScript Example:**\n\n```javascript\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 50,\n  fill: 'yellow',\n  stroke: 'black',\n  draggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\n  nodes: [rect],\n  rotationSnaps: [0, 90, 180, 270], // Snap to 90-degree intervals\n  rotationSnapTolerance: 30, // Snap within 30 degrees\n});\nlayer.add(tr);\n```\n\n**React Example:**\n\n```javascript\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={50}\n          y={50}\n          width={100}\n          height={50}\n          fill=\"yellow\"\n          stroke=\"black\"\n          draggable\n          ref={rectRef}\n        />\n        <Transformer\n          ref={trRef}\n          rotationSnaps={[0, 90, 180, 270]}\n          rotationSnapTolerance={30}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n**Vue Example:**\n\n```vue\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect :config=\"rectConfig\" ref=\"rectRef\" />\n      <v-transformer :config=\"transformerConfig\" ref=\"transformerRef\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 50,\n  fill: 'yellow',\n  stroke: 'black',\n  draggable: true\n};\n\nconst transformerConfig = {\n  rotationSnaps: [0, 90, 180, 270],\n  rotationSnapTolerance: 30\n};\n\nconst rectRef = ref(null);\nconst transformerRef = ref(null);\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([rectRef.value.getNode()]);\n});\n</script>\n```\n\n**Properties:**\n- `rotationSnaps` - Array of angles (in degrees) to snap to\n- `rotationSnapTolerance` - Distance (in degrees) within which snapping occurs\n\n**Common Snap Configurations:**\n\n```javascript\n// 90-degree snaps (cardinal directions)\nrotationSnaps: [0, 90, 180, 270]\n\n// 45-degree snaps (all octants)\nrotationSnaps: [0, 45, 90, 135, 180, 225, 270, 315]\n\n// 30-degree snaps (clock positions)\nrotationSnaps: [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330]\n\n// Custom snaps\nrotationSnaps: [0, 15, 75, 180]\n```\n\n**Use Cases:**\n- Align shapes to cardinal directions\n- Create precise angular layouts\n- Simplify rotation for users\n- Enforce specific rotation constraints\n- Improve UX with predictable snapping"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Stop Transform\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Programmatically stop an active transformation using the `stopTransform()` method. Useful for implementing custom constraints or validation during transformations.\n\n**Vanilla JavaScript Example:**\n\n```javascript\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst rect = new Konva.Rect({\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'yellow',\n  stroke: 'black',\n  draggable: true,\n});\nlayer.add(rect);\n\nconst tr = new Konva.Transformer({\n  nodes: [rect],\n});\nlayer.add(tr);\n\n// Stop transformation if width exceeds 200px\nrect.on('transform', function () {\n  const width = rect.width() * rect.scaleX();\n  if (width > 200) {\n    tr.stopTransform();\n  }\n});\n```\n\n**React Example:**\n\n```javascript\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect } from 'react';\n\nconst App = () => {\n  const rectRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([rectRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect\n          x={50}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"yellow\"\n          stroke=\"black\"\n          draggable\n          ref={rectRef}\n          onTransform={() => {\n            const node = rectRef.current;\n            const width = node.width() * node.scaleX();\n            if (width > 200) {\n              trRef.current.stopTransform();\n            }\n          }}\n        />\n        <Transformer ref={trRef} />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n**Vue Example:**\n\n```vue\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect\n        :config=\"rectConfig\"\n        @transform=\"handleTransform\"\n        ref=\"rectRef\"\n      />\n      <v-transformer :config=\"transformerConfig\" ref=\"transformerRef\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rectConfig = {\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: 'yellow',\n  stroke: 'black',\n  draggable: true\n};\n\nconst transformerConfig = {};\n\nconst rectRef = ref(null);\nconst transformerRef = ref(null);\n\nconst handleTransform = () => {\n  const node = rectRef.value.getNode();\n  const width = node.width() * node.scaleX();\n  if (width > 200) {\n    transformerRef.value.getNode().stopTransform();\n  }\n};\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([rectRef.value.getNode()]);\n});\n</script>\n```\n\n**Use Cases:**\n- Enforce maximum/minimum size constraints\n- Stop transformation on validation failure\n- Implement custom transformation limits\n- Prevent invalid shape states\n- Create dynamic constraint systems\n- Trigger alerts when limits are reached\n\n**Checking Transform State:**\n\n```javascript\n// Check if actively transforming\nif (tr.isTransforming()) {\n  tr.stopTransform();\n}\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Force Update\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Transformer automatically tracks properties of attached nodes, but cannot track deep changes inside Groups. Use `forceUpdate()` to manually update the transformer when node properties change programmatically.\n\n**When to Use:**\n- After changing Group children properties\n- After programmatic shape modifications\n- When transformer doesn't auto-update\n- After deep property changes\n\n**Vanilla JavaScript Example:**\n\n```javascript\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst group = new Konva.Group({\n  x: 50,\n  y: 50,\n  draggable: true,\n});\nlayer.add(group);\n\nconst text = new Konva.Text({\n  text: 'Some text here',\n  fontSize: 24,\n});\ngroup.add(text);\n\nconst rect = new Konva.Rect({\n  width: text.width(),\n  height: text.height(),\n  fill: 'yellow',\n});\ngroup.add(rect);\nrect.moveToBottom();\n\nconst tr = new Konva.Transformer({\n  nodes: [group],\n  padding: 5,\n  enabledAnchors: ['middle-left', 'middle-right'],\n});\nlayer.add(tr);\n\n// Button to change text\nconst button = document.createElement('button');\nbutton.innerHTML = 'Change text';\ndocument.body.appendChild(button);\n\nbutton.addEventListener('click', () => {\n  text.text('Something else is here');\n  rect.width(text.width());\n  \n  // Must manually update transformer\n  tr.forceUpdate();\n});\n```\n\n**React Example:**\n\n```javascript\nimport { Stage, Layer, Text, Rect, Group, Transformer } from 'react-konva';\nimport { useState, useRef, useEffect } from 'react';\n\nconst App = () => {\n  const [text, setText] = useState('Some text here');\n  const groupRef = useRef();\n  const trRef = useRef();\n\n  const handleClick = () => {\n    setText('Something else is here');\n  };\n\n  useEffect(() => {\n    if (trRef.current) {\n      trRef.current.nodes([groupRef.current]);\n    }\n  }, []);\n\n  return (\n    <>\n      <button onClick={handleClick}>Change text</button>\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Group x={50} y={50} draggable ref={groupRef}>\n            <Rect\n              width={text.length * 10}\n              height={30}\n              fill=\"yellow\"\n            />\n            <Text text={text} fontSize={24} />\n          </Group>\n          <Transformer\n            ref={trRef}\n            padding={5}\n            enabledAnchors={['middle-left', 'middle-right']}\n          />\n        </Layer>\n      </Stage>\n    </>\n  );\n};\n```\n\n**Vue Example:**\n\n```vue\n<template>\n  <div>\n    <button @click=\"changeText\">Change text</button>\n    <v-stage :config=\"stageSize\">\n      <v-layer>\n        <v-group :config=\"groupConfig\" ref=\"groupRef\">\n          <v-rect :config=\"rectConfig\" />\n          <v-text :config=\"textConfig\" />\n        </v-group>\n        <v-transformer :config=\"transformerConfig\" ref=\"transformerRef\" />\n      </v-layer>\n    </v-stage>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst text = ref('Some text here');\nconst groupRef = ref(null);\nconst transformerRef = ref(null);\n\nconst groupConfig = {\n  x: 50,\n  y: 50,\n  draggable: true\n};\n\nconst textConfig = computed(() => ({\n  text: text.value,\n  fontSize: 24\n}));\n\nconst rectConfig = computed(() => ({\n  width: text.value.length * 10,\n  height: 30,\n  fill: 'yellow'\n}));\n\nconst transformerConfig = {\n  padding: 5,\n  enabledAnchors: ['middle-left', 'middle-right']\n};\n\nconst changeText = () => {\n  text.value = 'Something else is here';\n};\n\nonMounted(() => {\n  if (transformerRef.value && groupRef.value) {\n    transformerRef.value.getNode().nodes([groupRef.value.getNode()]);\n  }\n});\n</script>\n```\n\n**Key Points:**\n- Transformer auto-tracks simple property changes\n- Cannot auto-track Group children changes\n- Call `forceUpdate()` after programmatic modifications\n- Essential for dynamic content updates\n- Required when shape dimensions change programmatically"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Resize Text\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "When transforming text, Transformer changes `scaleX` and `scaleY` properties. To resize text properly (changing width without scaling the font), reset scale back to 1 and adjust width accordingly.\n\n**Problem:** Default transformer scales text, making font size appear larger/smaller\n**Solution:** Reset scale and adjust width on transform event\n\n**Vanilla JavaScript Example:**\n\n```javascript\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\nconst text = new Konva.Text({\n  x: 50,\n  y: 50,\n  text: 'Hello from Konva! Try to resize me.',\n  fontSize: 24,\n  draggable: true,\n  width: 200,\n});\nlayer.add(text);\n\nconst tr = new Konva.Transformer({\n  nodes: [text],\n  // Enable only horizontal anchors to see effect clearly\n  enabledAnchors: ['middle-left', 'middle-right'],\n});\nlayer.add(tr);\n\n// Reset scale on transform\ntext.on('transform', function () {\n  text.setAttrs({\n    width: text.width() * text.scaleX(),\n    scaleX: 1,\n  });\n});\n```\n\n**React Example:**\n\n```javascript\nimport { Stage, Layer, Text, Transformer } from 'react-konva';\nimport { useRef, useEffect, useState } from 'react';\n\nconst App = () => {\n  const [textWidth, setTextWidth] = useState(200);\n  const textRef = useRef();\n  const trRef = useRef();\n\n  useEffect(() => {\n    trRef.current.nodes([textRef.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text\n          x={50}\n          y={50}\n          text=\"Hello from Konva! Try to resize me.\"\n          fontSize={24}\n          draggable\n          width={textWidth}\n          ref={textRef}\n          onTransform={() => {\n            const node = textRef.current;\n            setTextWidth(node.width() * node.scaleX());\n            node.scaleX(1);\n          }}\n        />\n        <Transformer\n          ref={trRef}\n          enabledAnchors={['middle-left', 'middle-right']}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n**Vue Example:**\n\n```vue\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-text\n        :config=\"textConfig\"\n        @transform=\"handleTransform\"\n        ref=\"textRef\"\n      />\n      <v-transformer :config=\"transformerConfig\" ref=\"transformerRef\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst textWidth = ref(200);\n\nconst textConfig = computed(() => ({\n  x: 50,\n  y: 50,\n  text: 'Hello from Konva! Try to resize me.',\n  fontSize: 24,\n  draggable: true,\n  width: textWidth.value\n}));\n\nconst transformerConfig = {\n  enabledAnchors: ['middle-left', 'middle-right']\n};\n\nconst textRef = ref(null);\nconst transformerRef = ref(null);\n\nconst handleTransform = () => {\n  const node = textRef.value.getNode();\n  textWidth.value = node.width() * node.scaleX();\n  node.scaleX(1);\n};\n\nonMounted(() => {\n  transformerRef.value.getNode().nodes([textRef.value.getNode()]);\n});\n</script>\n```\n\n**Key Concepts:**\n\n1. **Default Behavior:**\n   - Transformer changes `scaleX` and `scaleY`\n   - Text font size appears to change with scale\n\n2. **Proper Text Resize:**\n   - Calculate new width: `newWidth = width * scaleX`\n   - Set width to calculated value\n   - Reset scale back to 1\n\n3. **Why Only Horizontal Anchors:**\n   - Text typically reflows based on width\n   - Height adjusts automatically based on content\n   - Vertical scaling would scale font size\n\n**Use Cases:**\n- Text editors with resize handles\n- Resizable text boxes\n- Dynamic text containers\n- Text wrapping controls\n- Typography tools"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Ignore Stroke on Transform\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "By default, when transforming a shape, its stroke scales proportionally. There are two ways to prevent stroke scaling:\n\n**Method 1: Reset Scale on Transform End**\n- Reset scale to 1 after transformation\n- Manually adjust width/height\n\n**Method 2: Disable Stroke Scaling**\n- Set `strokeScaleEnabled: false` on shape\n- Set `ignoreStroke: true` on transformer\n\n**Vanilla JavaScript Example (Both Methods):**\n\n```javascript\nimport Konva from 'konva';\n\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight,\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// METHOD 1: Reset scale on transform end\nconst rect1 = new Konva.Rect({\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: '#00ff00',\n  stroke: 'black',\n  strokeWidth: 5,\n  draggable: true,\n});\nlayer.add(rect1);\n\nconst tr1 = new Konva.Transformer({\n  nodes: [rect1],\n});\nlayer.add(tr1);\n\nrect1.on('transformend', () => {\n  // Reset scale and adjust dimensions\n  rect1.width(rect1.width() * rect1.scaleX());\n  rect1.height(rect1.height() * rect1.scaleY());\n  rect1.scaleX(1);\n  rect1.scaleY(1);\n});\n\n// METHOD 2: Disable stroke scaling\nconst rect2 = new Konva.Rect({\n  x: 200,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: '#ff0000',\n  stroke: 'black',\n  strokeWidth: 5,\n  draggable: true,\n  strokeScaleEnabled: false, // Disable stroke scaling\n});\nlayer.add(rect2);\n\nconst tr2 = new Konva.Transformer({\n  nodes: [rect2],\n  ignoreStroke: true, // Ignore stroke in bounding box\n});\nlayer.add(tr2);\n```\n\n**React Example:**\n\n```javascript\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\nimport { useRef, useEffect, useState } from 'react';\n\nconst App = () => {\n  const [rect1Size, setRect1Size] = useState({\n    width: 100,\n    height: 100,\n  });\n\n  const rect1Ref = useRef();\n  const rect2Ref = useRef();\n  const tr1Ref = useRef();\n  const tr2Ref = useRef();\n\n  useEffect(() => {\n    tr1Ref.current.nodes([rect1Ref.current]);\n    tr2Ref.current.nodes([rect2Ref.current]);\n  }, []);\n\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        {/* Method 1: Reset scale */}\n        <Rect\n          x={50}\n          y={50}\n          width={rect1Size.width}\n          height={rect1Size.height}\n          fill=\"#00ff00\"\n          stroke=\"black\"\n          strokeWidth={5}\n          draggable\n          ref={rect1Ref}\n          onTransformEnd={(e) => {\n            const node = rect1Ref.current;\n            setRect1Size({\n              width: node.width() * node.scaleX(),\n              height: node.height() * node.scaleY(),\n            });\n            node.scaleX(1);\n            node.scaleY(1);\n          }}\n        />\n        <Transformer ref={tr1Ref} />\n\n        {/* Method 2: Disable stroke scaling */}\n        <Rect\n          x={200}\n          y={50}\n          width={100}\n          height={100}\n          fill=\"#ff0000\"\n          stroke=\"black\"\n          strokeWidth={5}\n          draggable\n          strokeScaleEnabled={false}\n          ref={rect2Ref}\n        />\n        <Transformer ref={tr2Ref} ignoreStroke={true} />\n      </Layer>\n    </Stage>\n  );\n};\n```\n\n**Vue Example:**\n\n```vue\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-rect\n        :config=\"rect1Config\"\n        @transformend=\"handleTransformEnd\"\n        ref=\"rect1Ref\"\n      />\n      <v-transformer :config=\"tr1Config\" ref=\"tr1Ref\" />\n\n      <v-rect :config=\"rect2Config\" ref=\"rect2Ref\" />\n      <v-transformer :config=\"tr2Config\" ref=\"tr2Ref\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst rect1Size = ref({ width: 100, height: 100 });\n\nconst rect1Config = {\n  x: 50,\n  y: 50,\n  width: rect1Size.value.width,\n  height: rect1Size.value.height,\n  fill: '#00ff00',\n  stroke: 'black',\n  strokeWidth: 5,\n  draggable: true\n};\n\nconst rect2Config = {\n  x: 200,\n  y: 50,\n  width: 100,\n  height: 100,\n  fill: '#ff0000',\n  stroke: 'black',\n  strokeWidth: 5,\n  draggable: true,\n  strokeScaleEnabled: false\n};\n\nconst tr1Config = {};\nconst tr2Config = { ignoreStroke: true };\n\nconst rect1Ref = ref(null);\nconst rect2Ref = ref(null);\nconst tr1Ref = ref(null);\nconst tr2Ref = ref(null);\n\nconst handleTransformEnd = () => {\n  const node = rect1Ref.value.getNode();\n  rect1Size.value = {\n    width: node.width() * node.scaleX(),\n    height: node.height() * node.scaleY()\n  };\n  node.scaleX(1);\n  node.scaleY(1);\n};\n\nonMounted(() => {\n  tr1Ref.value.getNode().nodes([rect1Ref.value.getNode()]);\n  tr2Ref.value.getNode().nodes([rect2Ref.value.getNode()]);\n});\n</script>\n```\n\n**Comparison:**\n\n| Approach | Pros | Cons |\n|----------|------|------|\n| Reset Scale | Full control, works universally | Requires transformend handler, more code |\n| Disable Stroke Scaling | Simple, declarative, less code | Shape must support strokeScaleEnabled |\n\n**Common Use Cases:**\n- Design tools where stroke width should remain constant\n- UI elements with borders\n- Icons with fixed outlines\n- Technical drawings\n- CAD applications\n- Vector graphic editors\n\n**Note:** The green rectangle (method 1) resets scale on transformend, while the red rectangle (method 2) simply disables stroke scaling via properties.\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Clipping Functions\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To clip nodes with custom regions:\n\n```javascript\nconst group = new Konva.Group({\n  clipFunc: function(ctx) {\n    ctx.beginPath();\n    ctx.arc(200, 120, 50, 0, Math.PI * 2, false);\n    ctx.arc(280, 120, 50, 0, Math.PI * 2, false);\n  }\n});\n\n// Add shapes to group - they'll be clipped\ngroup.add(shape1);\ngroup.add(shape2);\n```\n\n**You can apply clip functions to:**\n- Groups\n- Layers\n\n**Use cases:**\n- Complex clipping regions\n- Multiple clipping areas\n- Custom shape clipping\n- Artistic effects\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Groups\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To group shapes together:\n\n```javascript\nconst group = new Konva.Group({\n  x: 50,\n  y: 50,\n  draggable: true\n});\n\nconst circle = new Konva.Circle({\n  x: 40,\n  y: 40,\n  radius: 30,\n  fill: 'red'\n});\n\nconst rect = new Konva.Rect({\n  x: 80,\n  y: 20,\n  width: 100,\n  height: 50,\n  fill: 'green'\n});\n\ngroup.add(circle);\ngroup.add(rect);\nlayer.add(group);\n```\n\n**Benefits of grouping:**\n- Transform multiple shapes together\n- Apply effects to all children\n- Organize complex scenes\n- Nested groups for hierarchies"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Change Containers\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Move shapes between containers using `moveTo()`:\n\n```javascript\nconst group1 = new Konva.Group();\nconst group2 = new Konva.Group();\n\n// Add shape to group1\nconst redBox = new Konva.Rect({\n  fill: 'red',\n  width: 30,\n  height: 30\n});\ngroup1.add(redBox);\n\n// Move to group2\nredBox.moveTo(group2);\n\n// Can also move to layers directly\nredBox.moveTo(layer);\n```\n\n**You can move:**\n- Shapes between groups\n- Shapes between layers\n- Groups between layers\n- Groups into other groups"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Layering (Z-Index)\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Control draw order with layering methods:\n\n```javascript\n// Move to top/bottom\nyellowBox.moveToTop();\nyellowBox.moveToBottom();\n\n// Move up/down one position\nyellowBox.moveUp();\nyellowBox.moveDown();\n\n// Set specific zIndex\nyellowBox.zIndex(5);\n\n// Get current zIndex\nconst index = yellowBox.zIndex();\n```\n\n**Layering methods work on:**\n- Shapes within layers\n- Shapes within groups\n- Groups within layers\n- Layers within stages\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Filters\nLevel: H2\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To apply filters, cache the node first:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Blur]);\nimage.blurRadius(10);\n```\n\nSee API Reference section for all available filters.\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Tween Controls\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Control tween playback with methods:\n\n```javascript\nconst tween = new Konva.Tween({\n  node: circle,\n  duration: 2,\n  x: 400,\n  easing: Konva.Easings.EaseInOut\n});\n\n// Start or resume\ntween.play();\n\n// Pause\ntween.pause();\n\n// Reverse direction\ntween.reverse();\n\n// Reset to initial state\ntween.reset();\n\n// Jump to final state\ntween.finish();\n\n// Seek to specific time (in seconds)\ntween.seek(1.5);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Common Easings\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create tweens with easing:\n\n```javascript\nconst tween = new Konva.Tween({\n  node: box,\n  duration: 1,\n  x: width - 150,\n  easing: Konva.Easings.EaseInOut\n}).play();\n```\n\n**Available easings:**\n- Linear\n- EaseIn\n- EaseOut\n- EaseInOut\n- StrongEaseIn\n- StrongEaseOut\n- StrongEaseInOut\n- BackEaseIn\n- BackEaseOut\n- BackEaseInOut\n- ElasticEaseIn\n- ElasticEaseOut\n- ElasticEaseInOut\n- BounceEaseIn\n- BounceEaseOut\n- BounceEaseInOut"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Shorter Syntax\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\ncircle.to({\n  duration: 1,\n  fill: 'green'\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Tween Events\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Listen to tween lifecycle:\n\n```javascript\ntween.on('onFinish', function() {\n  console.log('Tween finished');\n});\n\ntween.on('onUpdate', function() {\n  console.log('Tween updating');\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Complex Tweening\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Tween multiple properties:\n\n```javascript\nconst tween = new Konva.Tween({\n  node: shape,\n  duration: 2,\n  x: 300,\n  y: 200,\n  rotation: 180,\n  scaleX: 2,\n  scaleY: 2,\n  opacity: 0.5,\n  easing: Konva.Easings.ElasticEaseOut\n});\n\ntween.play();\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Filter Tweening\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Animate filter properties:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Blur]);\n\nconst tween = new Konva.Tween({\n  node: image,\n  duration: 2,\n  blurRadius: 20\n});\n\ntween.play();\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Create Animation\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To create custom animations:\n\n```javascript\nconst anim = new Konva.Animation(function(frame) {\n  const time = frame.time;\n  const timeDiff = frame.timeDiff;\n  const frameRate = frame.frameRate;\n  \n  // Update shape properties\n  box.rotation(time * 0.1);\n}, layer);\n\nanim.start();\n\n// Stop animation\nanim.stop();\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Select by ID\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nconst shape = layer.findOne('#myRect');\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Select by Name\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nconst shapes = layer.find('.myName');\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Select by Type\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nconst circles = layer.find('Circle');\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Select with Function\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nconst groups = stage.find(node => {\n  return node.getType() === 'Group';\n});\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Simple Load\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "To load a stage from JSON:\n\n```javascript\nconst json = '{\"attrs\":{\"width\":400,\"height\":400},\"className\":\"Stage\",...}';\nconst stage = Konva.Node.create(json, 'container');\n```\n\n**Note:** In React/Vue, manage state separately instead of using Konva.Node.create()."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Serialize Stage\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "```javascript\nconst json = stage.toJSON();\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Shape Caching\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Cache complex shapes to improve performance:\n\n```javascript\ngroup.cache();\n\n// Clear cache when needed\ngroup.clearCache();\n```\n\n**When to cache:**\n- Complex shapes with many drawing operations\n- Shapes with filters\n- Shapes that don't change often but redraw frequently\n\n**Guidelines:**\n- Don't cache simple shapes without filters\n- Every cached node creates several canvas buffers\n- Better to cache groups than individual shapes\n- Always measure performance with and without caching"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Batch Draw\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Use batchDraw() to schedule drawing:\n\n```javascript\nlayer.batchDraw();\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Listening False\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Disable event listening for better performance:\n\n```javascript\nshape.listening(false);\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: React\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Install:\n```bash\nnpm install react-konva konva --save\n```\n\nBasic usage:\n```jsx\nimport React from 'react';\nimport { Stage, Layer, Rect, Circle } from 'react-konva';\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Rect \n          x={20} \n          y={50} \n          width={100} \n          height={100} \n          fill=\"red\" \n          draggable \n        />\n        <Circle \n          x={200} \n          y={100} \n          radius={50} \n          fill=\"green\" \n          draggable \n        />\n      </Layer>\n    </Stage>\n  );\n};\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Vue\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Install:\n```bash\nnpm install vue-konva konva --save\n```\n\nSetup:\n```javascript\nimport { createApp } from 'vue';\nimport VueKonva from 'vue-konva';\n\nconst app = createApp(App);\napp.use(VueKonva);\napp.mount('#app');\n```\n\nBasic usage:\n```vue\n<template>\n  <v-stage :config=\"stageSize\">\n    <v-layer>\n      <v-circle :config=\"circleConfig\" />\n      <v-rect :config=\"rectConfig\" />\n    </v-layer>\n  </v-stage>\n</template>\n\n<script setup>\nconst stageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\n\nconst circleConfig = {\n  x: 100,\n  y: 100,\n  radius: 70,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n};\n</script>\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Select by Name\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "You can select shapes by their `name` property using the `find()` method with a dot (`.`) prefix:\n\n```javascript\n// Set names on shapes\nvar circle1 = new Konva.Circle({\n  name: 'myCircle',\n  radius: 30,\n  fill: 'red'\n});\n\nvar circle2 = new Konva.Circle({\n  name: 'myCircle',\n  radius: 30,\n  fill: 'blue'\n});\n\n// Find all shapes with name='myCircle'\nvar circles = layer.find('.myCircle'); // Returns array of nodes\n\n// Example: Animate all circles with the same name\ncircles.forEach(circle => {\n  circle.to({\n    scaleX: 2,\n    scaleY: 2,\n    duration: 1\n  });\n});\n```\n\n**Key Points:**\n- Use dot prefix (`.`) for name selector\n- Returns array of all matching nodes\n- Can be used on any container (Layer, Group, Stage)\n- Names don't need to be unique"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Select by Type\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Select all shapes of a specific type/class using `find()` with the class name:\n\n```javascript\n// Find all Circle shapes\nvar circles = layer.find('Circle'); // Returns array of all Circle nodes\n\n// Find all Rect shapes\nvar rects = layer.find('Rect');\n\n// Example: Scale all circles\ncircles.forEach(circle => {\n  circle.scale({ x: 1.5, y: 1.5 });\n});\n```\n\n**Supported Type Names:**\n- `'Circle'`, `'Rect'`, `'Line'`, `'Ellipse'`, `'RegularPolygon'`\n- `'Star'`, `'Ring'`, `'Arc'`, `'Wedge'`, `'Path'`\n- `'Image'`, `'Text'`, `'Label'`, `'Sprite'`\n- `'Group'`, `'Layer'`, `'Shape'` (custom shapes)\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Best Practices for Save/Load\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Important:** `toJSON()` and `Node.create()` should **NOT** be used for complex applications, especially with frameworks like React/Vue.\n\n**Why?**\n1. **Visual complexity ≠ State complexity** - Most visual properties (shadows, strokes, sizes, colors) don't need serialization. Only serialize core state.\n2. **Frameworks handle rendering** - React/Vue already manage state and rendering, so duplicating this with Konva's serialization is an anti-pattern.\n\n**Recommended Pattern:**\n\n```javascript\n// Keep minimal state\nconst state = [\n  { x: 10, y: 10 },\n  { x: 50, y: 50 }\n];\n\n// Create shapes from state\nfunction create(state) {\n  return state.map(item => new Konva.Circle({\n    x: item.x,\n    y: item.y,\n    radius: 50,\n    fill: 'green',\n    draggable: true\n  }));\n}\n\n// Update state from shapes\nfunction update() {\n  return layer.children.map(shape => ({\n    x: shape.x(),\n    y: shape.y()\n  }));\n}\n\n// Undo/Redo implementation\nlet history = [state];\nlet historyStep = 0;\n\nfunction save() {\n  const newState = update();\n  historyStep++;\n  history = history.slice(0, historyStep);\n  history.push(newState);\n}\n\nfunction undo() {\n  if (historyStep === 0) return;\n  historyStep--;\n  layer.destroyChildren();\n  create(history[historyStep]).forEach(shape => layer.add(shape));\n}\n\nfunction redo() {\n  if (historyStep === history.length - 1) return;\n  historyStep++;\n  layer.destroyChildren();\n  create(history[historyStep]).forEach(shape => layer.add(shape));\n}\n```\n\n**React/Vue Pattern:**\n\n```javascript\n// React example\nconst [circles, setCircles] = useState([\n  { x: 50, y: 50, id: 1 },\n  { x: 150, y: 100, id: 2 }\n]);\n\n// Render from state\n{circles.map(circle => (\n  <Circle\n    key={circle.id}\n    x={circle.x}\n    y={circle.y}\n    radius={50}\n    fill=\"green\"\n    draggable\n    onDragEnd={(e) => {\n      const updatedCircles = circles.map(c =>\n        c.id === circle.id\n          ? { ...c, x: e.target.x(), y: e.target.y() }\n          : c\n      );\n      setCircles(updatedCircles);\n    }}\n  />\n))}\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Complex Load (Node.create)\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "For **simple apps only**, you can use `Konva.Node.create()` to deserialize JSON:\n\n```javascript\n// Serialize\nconst json = stage.toJSON();\n\n// Deserialize\nconst stage = Konva.Node.create(json, 'container');\n\n// Note: Must manually restore:\n// 1. Images (reload image sources)\n// 2. Event handlers (not serializable)\n```\n\n**WARNING:** This is an **anti-pattern for React/Vue**. Frameworks should manage state separately, not use Node.create()."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: High Quality Export\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Export canvas at higher resolution using `pixelRatio`:\n\n```javascript\n// Default: 1x resolution (500x500 stage → 500x500 image)\nconst dataURL = stage.toDataURL();\n\n// 2x resolution for retina displays (500x500 stage → 1000x1000 image)\nconst highResURL = stage.toDataURL({\n  pixelRatio: 2\n});\n\n// Even higher quality\nconst superHighResURL = stage.toDataURL({\n  pixelRatio: 3\n});\n\n// Export as JPEG with quality setting\nconst jpegURL = stage.toDataURL({\n  mimeType: 'image/jpeg',\n  quality: 0.8,\n  pixelRatio: 2\n});\n\n// Download image\nconst downloadLink = document.createElement('a');\ndownloadLink.href = highResURL;\ndownloadLink.download = 'canvas.png';\ndownloadLink.click();\n```\n\n**Notes:**\n- Konva stores **vector data** (except bitmaps and cached nodes), so scales beautifully\n- Use `stage.toImage()` for same functionality\n- Higher pixelRatio = larger file size but better quality"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Stage Data URL\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Convert stage or any node to data URL for saving as image:\n\n```javascript\n// Basic usage\nconst dataURL = stage.toDataURL();\n\n// Open in new window\nconst win = window.open();\nwin.document.write(`<img src=\"${dataURL}\" alt=\"Stage\"/>`);\n\n// With options\nconst jpegURL = stage.toDataURL({\n  mimeType: 'image/jpeg',\n  quality: 0.8,\n  pixelRatio: 2\n});\n\n// Export specific layer\nconst layerURL = layer.toDataURL();\n\n// Export specific shape (must be added to layer first)\nconst circleURL = circle.toDataURL();\n```\n\n**React Example:**\n\n```javascript\nconst stageRef = useRef(null);\n\nconst handleExport = () => {\n  const dataURL = stageRef.current.toDataURL();\n  \n  // Download\n  const link = document.createElement('a');\n  link.href = dataURL;\n  link.download = 'stage.png';\n  link.click();\n};\n\nreturn (\n  <>\n    <button onClick={handleExport}>Save as Image</button>\n    <Stage ref={stageRef} width={400} height={400}>\n      <Layer>\n        <Rect x={100} y={100} width={100} height={100} fill=\"red\" draggable />\n      </Layer>\n    </Stage>\n  </>\n);\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: All Performance Tips\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Why Performance Matters:**\n- HTML5 canvas can handle millions of computations per second\n- But thousands of shapes × frequent redraws = observable lag\n- Goal: Compute as little as possible, draw as little as possible\n\n**Two Categories of Cost:**\n1. **Computation** - Processing drawing instructions\n2. **Drawing** - Moving bytes from memory to screen (plus compositing, per-pixel processing)\n\n#### Stage Optimizations\n\n1. **Optimize Stage Size** - Avoid large stages. Moving all those pixels is expensive. Use viewport tricks instead of mega-stages.\n\n2. **Set Viewport on Mobile:**\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n```\nPrevents unnecessary scaling on mobile.\n\n3. **Use Konva.pixelRatio = 1 on Retina:**\n```javascript\nKonva.pixelRatio = 1; // Reduces scaling work on retina displays\n```\nCheck quality - may affect output in some cases.\n\n#### Layer Management\n\n1. **Minimize Layers** - Each layer = separate canvas element. Keep to 3-5 max.\n\n2. **Use layer.listening(false)** - Disables event detection for entire layer:\n```javascript\nbackgroundLayer.listening(false); // No event overhead\n```\n\n3. **Optimize Dragging** - Move shape to dedicated layer while dragging:\n```javascript\nshape.on('dragstart', () => {\n  shape.moveTo(dragLayer);\n});\n\nshape.on('dragend', () => {\n  shape.moveTo(mainLayer);\n});\n```\n\n#### Shape Optimizations\n\n1. **Shape Caching** - Cache complex shapes as images:\n```javascript\ncomplexShape.cache();\ngroup.cache(); // Cache entire groups\n```\n\n2. **Hide/Remove Invisible Shapes:**\n```javascript\nif (shape.opacity() === 0 || shape.isOutOfView()) {\n  shape.hide(); // or shape.remove()\n}\n```\n\n3. **Use shape.listening(false)** - Disable events for static shapes:\n```javascript\ndecoration.listening(false);\n```\n\n4. **Disable Perfect Drawing** - Skip extra compositing:\n```javascript\nshape.perfectDrawEnabled(false);\n```\nSafe when shape has fill, stroke, and opacity.\n\n5. **Optimize Stroke Drawing** - Avoid shadow on stroke:\n```javascript\nshape.shadowForStrokeEnabled(false);\n```\n\n#### Animation Optimizations\n\n1. **Use Konva.Animation** - Better than requestAnimationFrame\n2. **Cache animated shapes** - Especially complex ones\n3. **Use batchDraw()** - Lets Konva optimize redraw timing\n\n#### Memory Management\n\n1. **Destroy unused shapes:**\n```javascript\nshape.destroy(); // Not just remove()\n```\n\n2. **Destroy tweens:**\n```javascript\ntween.destroy(); // After tween completes\n// Or use node.to() which auto-destroys\n```\n\n**Demo Example:**\n\n```javascript\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\n// Background layer - no events needed\nconst backgroundLayer = new Konva.Layer({ listening: false });\n\n// Main interactive layer\nconst mainLayer = new Konva.Layer();\n\n// Drag optimization layer\nconst dragLayer = new Konva.Layer();\n\nstage.add(backgroundLayer, mainLayer, dragLayer);\n\n// Cached shape with optimizations\nconst star = new Konva.Star({\n  x: 200,\n  y: 200,\n  numPoints: 6,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true,\n  perfectDrawEnabled: false // Performance optimization\n});\n\nstar.cache(); // Cache for better performance\n\n// Optimize dragging\nstar.on('dragstart', () => star.moveTo(dragLayer));\nstar.on('dragend', () => star.moveTo(mainLayer));\n\nmainLayer.add(star);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Avoid Memory Leaks\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Deleting Shapes:**\n\nTwo methods: `remove()` vs `destroy()`\n\n```javascript\n// remove() - Shape can be reused later\nshape.remove(); // Removes from container, keeps in memory\nlayer.add(shape); // Can add back later\n\n// destroy() - Completely delete\nshape.destroy(); // Deletes all references from Konva engine\n```\n\n**Tweening:**\n\nAlways destroy tweens after usage:\n\n```javascript\n// BAD: Memory leak\nconst tween = new Konva.Tween({\n  node: circle,\n  x: 100,\n  duration: 1\n});\ntween.play();\n\n// GOOD: Manual cleanup\ntween.onFinish = () => {\n  tween.destroy();\n};\n\n// BEST: Use to() method (auto-destroys)\ncircle.to({\n  x: 100,\n  duration: 1\n}); // Automatically destroyed when complete\n```\n\n**React Pattern:**\n\n```javascript\nconst [isVisible, setIsVisible] = useState(true);\n\n// Component automatically handles cleanup\n{isVisible && (\n  <Circle\n    x={100}\n    y={100}\n    radius={30}\n    fill=\"red\"\n  />\n)}\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Batch Draw\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Update (Konva v8+):** Konva now automatically batches draws. This is only relevant if you use `Konva.autoDrawEnabled = false`.\n\n**Problem:** Calling `draw()` on every mousemove event → hundreds of redraws/second → browser can't keep up.\n\n**Solution:** Use `batchDraw()` which hooks into Konva's animation engine and intelligently limits redraws based on browser capability.\n\n```javascript\nKonva.autoDrawEnabled = false; // For manual control\n\nstage.on('mousemove', () => {\n  rect.rotate(5);\n  layer.batchDraw(); // Intelligent batching instead of draw()\n});\n```\n\n**How batchDraw() Works:**\n- Batches multiple draw requests\n- Limits to browser's max frame rate\n- No matter how many times called, won't exceed browser capability\n- Prevents jumpy animations from excessive redraws"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Layer Management\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Each Konva layer = separate HTML5 canvas element.\n\n**Benefits:**\n- Update only changed layers (avoid full stage redraw)\n- Separate static vs animated content\n\n**Best Practice:** Keep layers to minimum (usually 3-5 max) since each has performance overhead.\n\n**Example:**\n\n```javascript\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\n// Static layer - never changes\nconst textLayer = new Konva.Layer();\ntextLayer.add(new Konva.Text({\n  x: 20,\n  y: 20,\n  text: 'Static text',\n  fontSize: 16\n}));\n\n// Animated layer - updates frequently\nconst animLayer = new Konva.Layer();\nconst circle = new Konva.Circle({\n  x: 100,\n  y: 100,\n  radius: 30,\n  fill: 'red'\n});\nanimLayer.add(circle);\n\nstage.add(textLayer, animLayer);\n\n// Animation only redraws animLayer, not textLayer\nconst anim = new Konva.Animation((frame) => {\n  circle.x(100 + Math.sin(frame.time / 1000) * 100);\n  circle.y(100 + Math.sin(frame.time / 2000) * 100);\n}, animLayer); // Only animLayer specified\n\nanim.start();\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Listening False\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Disable event detection for shapes that don't need it:\n\n```javascript\n// Shape with events disabled\nconst decoration = new Konva.Circle({\n  x: 100,\n  y: 100,\n  radius: 20,\n  fill: 'green',\n  listening: false // Ignore all events\n});\n```\n\n**Performance Impact:**\n- Konva checks every shape for event listeners on every event\n- With many shapes (100s-1000s), this adds up\n- `listening: false` removes this overhead\n\n**Example:**\n\n```javascript\n// 100 interactive circles (with hover effects)\nfor (let i = 0; i < 100; i++) {\n  const circle = new Konva.Circle({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    radius: 20,\n    fill: 'blue',\n    listening: true // Default\n  });\n  \n  circle.on('mouseover', () => circle.fill('red'));\n  circle.on('mouseout', () => circle.fill('blue'));\n  \n  layer.add(circle);\n}\n\n// 1000 non-interactive circles (better performance)\nfor (let i = 0; i < 1000; i++) {\n  const circle = new Konva.Circle({\n    x: Math.random() * stage.width(),\n    y: Math.random() * stage.height(),\n    radius: 20,\n    fill: 'green',\n    listening: false // No event overhead\n  });\n  \n  layer.add(circle);\n}\n```\n\n**React Example:**\n\n```javascript\n// Non-interactive decorative circles\n{decorativeCircles.map(circle => (\n  <Circle\n    key={circle.id}\n    x={circle.x}\n    y={circle.y}\n    radius={20}\n    fill=\"green\"\n    listening={false} // Significantly better performance\n  />\n))}\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Optimize Animation\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Key Tips:**\n\n1. Use `Konva.Animation` instead of `requestAnimationFrame`\n2. Only animate properties that need to change\n3. Cache complex shapes\n4. Minimize number of animated nodes\n\n**Example:**\n\n```javascript\nconst stage = new Konva.Stage({\n  container: 'container',\n  width: window.innerWidth,\n  height: window.innerHeight\n});\n\nconst layer = new Konva.Layer();\nstage.add(layer);\n\n// Complex shape - cache it\nconst star = new Konva.Star({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  numPoints: 6,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nstar.cache(); // Better performance\nlayer.add(star);\n\n// Simple shape - no cache needed\nconst circle = new Konva.Circle({\n  x: 100,\n  y: 100,\n  radius: 20,\n  fill: 'red'\n});\nlayer.add(circle);\n\n// Optimized animation\nconst anim = new Konva.Animation((frame) => {\n  // Rotate cached star\n  star.rotation(frame.time * 0.1);\n  \n  // Move circle in pattern\n  circle.x(100 + Math.cos(frame.time * 0.002) * 50);\n  circle.y(100 + Math.sin(frame.time * 0.002) * 50);\n}, layer);\n\nanim.start();\n```\n\n**React Example:**\n\n```javascript\nconst starRef = useRef(null);\nconst circleRef = useRef(null);\nconst animRef = useRef(null);\n\nuseEffect(() => {\n  // Cache complex shape\n  if (starRef.current) {\n    starRef.current.cache();\n  }\n  \n  // Create animation\n  const anim = new Konva.Animation((frame) => {\n    starRef.current.rotation(frame.time * 0.1);\n    circleRef.current.x(100 + Math.cos(frame.time * 0.002) * 50);\n    circleRef.current.y(100 + Math.sin(frame.time * 0.002) * 50);\n  }, starRef.current.getLayer());\n  \n  animRef.current = anim;\n  anim.start();\n  \n  return () => anim.stop();\n}, []);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Optimize Strokes\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "When a shape has both stroke and shadow, Konva does extra internal drawing to ensure the stroke's shadow renders correctly.\n\n**Problem:** Performance cost from double-rendering.\n\n**Solution:** Disable shadow for stroke using `shadowForStrokeEnabled(false)`:\n\n```javascript\nconst circle = new Konva.Circle({\n  x: 100,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowOffset: { x: 5, y: 5 },\n  shadowForStrokeEnabled: false // Better performance\n});\n```\n\n**Comparison:**\n\n```javascript\n// Default (slower): Shadow applies to both fill AND stroke\nconst circleWithStrokeShadow = new Konva.Circle({\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  shadowColor: 'black',\n  shadowBlur: 10\n  // shadowForStrokeEnabled: true (default)\n});\n\n// Optimized (faster): Shadow only on fill, not stroke\nconst circleOptimized = new Konva.Circle({\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  shadowColor: 'black',\n  shadowBlur: 10,\n  shadowForStrokeEnabled: false // Skip stroke shadow\n});\n```\n\n**FPS Comparison Demo:**\n\n```javascript\nconst anim = new Konva.Animation((frame) => {\n  circleWithStrokeShadow.rotation(frame.time * 0.1);\n  circleOptimized.rotation(frame.time * 0.1);\n  \n  // Monitor FPS - optimized version will show better frameRate\n  console.log('FPS:', frame.frameRate.toFixed(1));\n}, layer);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Shape Caching\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Cache complex shapes as images to avoid redrawing them repeatedly.\n\n**When to Cache:**\n1. Complex shapes with many drawing operations\n2. Shapes with filters\n3. Shapes that don't change often but redraw frequently\n\n**How It Works:**\n1. Konva creates internal canvas buffer\n2. Draws shape onto buffer once\n3. Reuses cached buffer for all subsequent draws (much faster)\n\n**Usage:**\n\n```javascript\nconst complexShape = new Konva.Star({\n  x: 200,\n  y: 200,\n  numPoints: 6,\n  innerRadius: 40,\n  outerRadius: 70,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n  shadowColor: 'black',\n  shadowBlur: 10\n});\n\ncomplexShape.cache(); // Cache it!\n\n// Clear cache if shape changes significantly\ncomplexShape.clearCache();\n```\n\n**Guidelines:**\n\n1. **Don't cache simple shapes** - May be slower than direct rendering\n2. **Don't overuse** - Each cache = multiple canvas buffers (memory cost)\n3. **Cache groups, not individual shapes** - More efficient\n4. **Always measure** - Test with/without caching to verify improvement\n\n**Performance Demo:**\n\n```javascript\nconst group = new Konva.Group({\n  x: stage.width() / 2,\n  y: stage.height() / 2\n});\n\n// Add 5000 circles to group\nfor (let i = 0; i < 5000; i++) {\n  const angle = Math.random() * Math.PI * 2;\n  const distance = Math.random() * 300;\n  \n  const circle = new Konva.Circle({\n    x: Math.cos(angle) * distance,\n    y: Math.sin(angle) * distance,\n    radius: 5 + Math.random() * 10,\n    fill: Konva.Util.getRandomColor(),\n    shadowColor: 'black',\n    shadowBlur: 10,\n    listening: false\n  });\n  \n  group.add(circle);\n}\n\nlayer.add(group);\n\n// Animate rotation\nconst anim = new Konva.Animation((frame) => {\n  group.rotation(frame.time * 0.05);\n  \n  // FPS counter shows performance\n  fpsText.text('FPS: ' + frame.frameRate.toFixed(1));\n}, layer);\n\nanim.start();\n\n// Toggle caching to see difference\nconst toggleCache = (enabled) => {\n  if (enabled) {\n    group.cache(); // Dramatically better FPS\n  } else {\n    group.clearCache();\n  }\n};\n```\n\n**React Example:**\n\n```javascript\nconst groupRef = useRef(null);\nconst [isCached, setIsCached] = useState(false);\n\nuseEffect(() => {\n  if (groupRef.current) {\n    if (isCached) {\n      groupRef.current.cache();\n    } else {\n      groupRef.current.clearCache();\n    }\n  }\n}, [isCached]);\n\nreturn (\n  <>\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={isCached}\n        onChange={(e) => setIsCached(e.target.checked)}\n      />\n      Enable Caching\n    </label>\n    \n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Group ref={groupRef}>\n          {/* 5000+ complex shapes */}\n        </Group>\n      </Layer>\n    </Stage>\n  </>\n);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Disable Perfect Draw\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Problem:** Some canvas drawing produces unexpected results. For example, a shape with fill + stroke + opacity shows a darker line where stroke overlaps fill.\n\n**Konva's Fix:** Uses buffer canvas:\n1. Draw shape on buffer without opacity\n2. Fill and stroke it\n3. Apply opacity\n4. Copy to main canvas\n\n**Cost:** Performance hit from extra canvas operations.\n\n**Solution:** Disable perfect drawing when not needed:\n\n```javascript\nshape.perfectDrawEnabled(false);\n```\n\n**When Safe:**\n- Shape has fill, stroke, AND opacity\n- Visual result is acceptable without perfect drawing\n\n**Comparison:**\n\n```javascript\n// With perfect drawing (default, slower)\nconst perfectCircle = new Konva.Circle({\n  x: 100,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 10,\n  opacity: 0.5\n  // perfectDrawEnabled: true (default)\n});\n\n// Without perfect drawing (faster)\nconst nonPerfectCircle = new Konva.Circle({\n  x: 250,\n  y: 100,\n  radius: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 10,\n  opacity: 0.5,\n  perfectDrawEnabled: false // Better performance\n});\n```\n\n**Visual Difference:**\n- Perfect: Clean stroke, no overlap artifacts\n- Non-perfect: May show darker line where stroke meets fill\n- Often the difference is negligible, so worth the performance gain\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Create an Animation\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Use `Konva.Animation` constructor for custom animations:\n\n```javascript\nconst anim = new Konva.Animation(function(frame) {\n  // frame object contains:\n  // - time: milliseconds since animation start\n  // - timeDiff: milliseconds since last frame\n  // - frameRate: current FPS\n  \n  // Update shape properties (DO NOT call draw())\n  const radius = 50;\n  const x = radius * Math.cos(frame.time * 2 * Math.PI / 2000) + 100;\n  const y = radius * Math.sin(frame.time * 2 * Math.PI / 2000) + 100;\n  \n  rect.position({ x, y });\n}, layer); // Specify layer(s) to redraw\n\nanim.start();\n```\n\n**Key Points:**\n- Animation function receives `frame` object with timing info\n- **Never call draw()** - animation engine handles that\n- Only update node properties (position, rotation, scale, etc.)\n- Can specify single layer or array of layers\n\n**React Example:**\n\n```javascript\nconst rectRef = useRef(null);\n\nuseEffect(() => {\n  const anim = new Konva.Animation((frame) => {\n    const radius = 50;\n    const x = radius * Math.cos(frame.time * 2 * Math.PI / 2000) + 100;\n    const y = radius * Math.sin(frame.time * 2 * Math.PI / 2000) + 100;\n    \n    rectRef.current.position({ x, y });\n  }, rectRef.current.getLayer());\n  \n  anim.start();\n  \n  return () => anim.stop();\n}, []);\n\nreturn (\n  <Stage width={window.innerWidth} height={window.innerHeight}>\n    <Layer>\n      <Rect\n        ref={rectRef}\n        x={50}\n        y={50}\n        width={50}\n        height={50}\n        fill=\"green\"\n      />\n    </Layer>\n  </Stage>\n);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Moving (Position Animation)\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Animate shape position using sine/cosine for smooth motion:\n\n```javascript\nconst circle = new Konva.Circle({\n  x: 50,\n  y: window.innerHeight / 2,\n  radius: 30,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4\n});\n\nlayer.add(circle);\n\nconst amplitude = 100;\nconst period = 2000; // milliseconds\n\nconst anim = new Konva.Animation(function(frame) {\n  circle.x(\n    amplitude * Math.sin((frame.time * 2 * Math.PI) / period) +\n    window.innerWidth / 2\n  );\n}, layer);\n\nanim.start();\n```\n\n**Pattern Variations:**\n\n```javascript\n// Horizontal oscillation\ncircle.x(centerX + Math.sin(frame.time / 1000) * amplitude);\n\n// Vertical oscillation\ncircle.y(centerY + Math.sin(frame.time / 1000) * amplitude);\n\n// Circular motion\ncircle.x(centerX + Math.cos(frame.time / 1000) * radius);\ncircle.y(centerY + Math.sin(frame.time / 1000) * radius);\n\n// Figure-8 pattern\ncircle.x(centerX + Math.sin(frame.time / 1000) * scale);\ncircle.y(centerY + Math.sin(frame.time / 2000) * scale);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Rotation Animation\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Animate rotation around different pivot points using `offset`:\n\n```javascript\n// Rotate around top-left corner\nconst blueRect = new Konva.Rect({\n  x: 50,\n  y: 50,\n  width: 100,\n  height: 50,\n  fill: '#00D2FF',\n  stroke: 'black',\n  strokeWidth: 4,\n  offset: { x: 0, y: 0 } // Top-left pivot\n});\n\n// Rotate around center\nconst yellowRect = new Konva.Rect({\n  x: 200,\n  y: 50,\n  width: 100,\n  height: 50,\n  fill: 'yellow',\n  stroke: 'black',\n  strokeWidth: 4,\n  offset: { x: 50, y: 25 } // Center pivot (width/2, height/2)\n});\n\n// Rotate around external point\nconst redRect = new Konva.Rect({\n  x: 350,\n  y: 50,\n  width: 100,\n  height: 50,\n  fill: 'red',\n  stroke: 'black',\n  strokeWidth: 4,\n  offset: { x: -50, y: 25 } // 50px to the left\n});\n\nconst angularSpeed = 90; // degrees per second\n\nconst anim = new Konva.Animation(function(frame) {\n  const angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n  \n  blueRect.rotate(angleDiff);\n  yellowRect.rotate(angleDiff);\n  redRect.rotate(angleDiff);\n}, layer);\n\nanim.start();\n```\n\n**Key Points:**\n- Use `offset` to set rotation pivot point\n- `offset: {x: width/2, y: height/2}` = center rotation\n- Negative offset = external pivot point\n- `rotate(degrees)` adds to current rotation\n- `rotation(degrees)` sets absolute rotation"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Scaling Animation\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Animate scale on x/y axes independently or together:\n\n```javascript\n// Scale both axes\nconst blueHex = new Konva.RegularPolygon({\n  x: 50,\n  y: 50,\n  sides: 6,\n  radius: 20,\n  fill: '#00D2FF',\n  draggable: true\n});\n\n// Scale Y only\nconst yellowHex = new Konva.RegularPolygon({\n  x: 150,\n  y: 50,\n  sides: 6,\n  radius: 20,\n  fill: 'yellow',\n  draggable: true\n});\n\n// Scale X only\nconst redHex = new Konva.RegularPolygon({\n  x: 250,\n  y: 50,\n  sides: 6,\n  radius: 20,\n  fill: 'red',\n  draggable: true\n});\n\nconst period = 2000;\n\nconst anim = new Konva.Animation(function(frame) {\n  const scale = Math.sin(frame.time * 2 * Math.PI / period) + 2;\n  \n  // Scale both x and y\n  blueHex.scale({ x: scale, y: scale });\n  \n  // Scale y only\n  yellowHex.scaleY(scale);\n  \n  // Scale x only\n  redHex.scaleX(scale);\n}, layer);\n\nanim.start();\n```\n\n**Methods:**\n- `shape.scale({ x: 2, y: 2 })` - Scale both axes\n- `shape.scaleX(2)` - Scale x only\n- `shape.scaleY(2)` - Scale y only\n- Values < 1 = shrink, > 1 = grow"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Stop Animation\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Control animation playback with `start()` and `stop()`:\n\n```javascript\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 30,\n  fill: 'red'\n});\n\nlayer.add(circle);\n\nconst amplitude = 100;\nconst period = 2000;\n\nconst anim = new Konva.Animation(function(frame) {\n  circle.x(\n    amplitude * Math.sin((frame.time * 2 * Math.PI) / period) +\n    stage.width() / 2\n  );\n}, layer);\n\n// Start/stop controls\ndocument.getElementById('start').addEventListener('click', () => {\n  anim.start();\n});\n\ndocument.getElementById('stop').addEventListener('click', () => {\n  anim.stop();\n});\n```\n\n**React Example:**\n\n```javascript\nconst [isAnimating, setIsAnimating] = useState(false);\nconst animRef = useRef(null);\n\nuseEffect(() => {\n  const anim = new Konva.Animation((frame) => {\n    circleRef.current.x(\n      amplitude * Math.sin((frame.time * 2 * Math.PI) / period) +\n      window.innerWidth / 2\n    );\n  }, circleRef.current.getLayer());\n  \n  animRef.current = anim;\n  \n  return () => anim.stop();\n}, []);\n\nconst handleStart = () => {\n  animRef.current.start();\n  setIsAnimating(true);\n};\n\nconst handleStop = () => {\n  animRef.current.stop();\n  setIsAnimating(false);\n};\n\nreturn (\n  <>\n    <button onClick={handleStart} disabled={isAnimating}>\n      Start Animation\n    </button>\n    <button onClick={handleStop} disabled={!isAnimating}>\n      Stop Animation\n    </button>\n    <Stage>\n      <Layer>\n        <Circle ref={circleRef} />\n      </Layer>\n    </Stage>\n  </>\n);\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Brighten Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Note:** Deprecated - use Brightness filter instead.\n\nBrighten or darken images using `Konva.Filters.Brighten`:\n\n```javascript\nconst imageObj = new Image();\nimageObj.onload = () => {\n  const image = new Konva.Image({\n    x: 50,\n    y: 50,\n    image: imageObj,\n    draggable: true\n  });\n  \n  layer.add(image);\n  \n  // Must cache before applying filter\n  image.cache();\n  image.filters([Konva.Filters.Brighten]);\n  image.brightness(0.3); // Range: -1 to 1\n  \n  // Negative values darken, positive brighten\n};\nimageObj.src = 'image.jpg';\n```\n\n**React Example:**\n\n```javascript\nconst [brightness, setBrightness] = useState(0.3);\nconst [image] = useImage('image.jpg', 'anonymous');\nconst imageRef = useRef(null);\n\nuseEffect(() => {\n  if (image && imageRef.current) {\n    imageRef.current.cache();\n  }\n}, [image]);\n\nreturn (\n  <>\n    <input\n      type=\"range\"\n      min=\"-1\"\n      max=\"1\"\n      step=\"0.1\"\n      value={brightness}\n      onChange={(e) => setBrightness(parseFloat(e.target.value))}\n    />\n    <Stage>\n      <Layer>\n        <Image\n          ref={imageRef}\n          image={image}\n          filters={[Konva.Filters.Brighten]}\n          brightness={brightness}\n        />\n      </Layer>\n    </Stage>\n  </>\n);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Grayscale Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Convert image to grayscale:\n\n```javascript\nconst image = new Konva.Image({\n  x: 50,\n  y: 50,\n  image: imageObj\n});\n\nlayer.add(image);\nimage.cache();\nimage.filters([Konva.Filters.Grayscale]);\n```\n\n**React:**\n\n```javascript\n<Image\n  image={image}\n  filters={[Konva.Filters.Grayscale]}\n/>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Blur Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Apply blur effect with adjustable radius:\n\n```javascript\nconst image = new Konva.Image({\n  x: 50,\n  y: 50,\n  image: imageObj\n});\n\nlayer.add(image);\nimage.cache();\nimage.filters([Konva.Filters.Blur]);\nimage.blurRadius(10); // Range: 0-40+\n```\n\n**With Slider:**\n\n```javascript\nconst slider = document.createElement('input');\nslider.type = 'range';\nslider.min = '0';\nslider.max = '40';\nslider.value = '10';\n\nslider.addEventListener('input', (e) => {\n  image.blurRadius(parseInt(e.target.value));\n});\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Invert Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Invert image colors:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Invert]);\n```\n\nSimple, no configuration needed."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Custom Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Create custom filters by manipulating ImageData:\n\n```javascript\n// Define custom filter\nKonva.Filters.RemoveAlpha = function(imageData) {\n  const data = imageData.data;\n  for (let i = 0; i < data.length; i += 4) {\n    data[i + 3] = 255; // Set alpha to 1 (fully opaque)\n  }\n};\n\n// Apply custom filter\nimage.cache();\nimage.filters([Konva.Filters.RemoveAlpha]);\n```\n\n**Filter Function Pattern:**\n\n```javascript\nfunction CustomFilter(imageData) {\n  const data = imageData.data; // RGBA array\n  \n  // data[0] = red, data[1] = green, data[2] = blue, data[3] = alpha\n  // data[4] = next pixel's red, etc.\n  \n  for (let i = 0; i < data.length; i += 4) {\n    // Manipulate pixel data\n    data[i] = ...; // red\n    data[i + 1] = ...; // green\n    data[i + 2] = ...; // blue\n    data[i + 3] = ...; // alpha\n  }\n}\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: HSL Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Adjust Hue, Saturation, and Luminance:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.HSL]);\n\nimage.hue(45); // Range: -180 to 180\nimage.saturation(1.5); // Range: -2 to 10\nimage.luminance(0.3); // Range: -2 to 2\n```\n\n**With Sliders:**\n\n```javascript\nconst [hue, setHue] = useState(0);\nconst [saturation, setSaturation] = useState(0);\nconst [luminance, setLuminance] = useState(0);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.HSL]}\n  hue={hue}\n  saturation={saturation}\n  luminance={luminance}\n/>\n\n<input\n  type=\"range\"\n  min=\"-180\"\n  max=\"180\"\n  value={hue}\n  onChange={(e) => setHue(parseInt(e.target.value))}\n/>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: RGB Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Adjust red, green, and blue channels independently:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.RGB]);\n\nimage.red(100); // Range: 0-255\nimage.green(150); // Range: 0-255\nimage.blue(200); // Range: 0-255\n```\n\n**React Example:**\n\n```javascript\nconst [red, setRed] = useState(100);\nconst [green, setGreen] = useState(100);\nconst [blue, setBlue] = useState(100);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.RGB]}\n  red={red}\n  green={green}\n  blue={blue}\n/>\n\n<div>\n  Red: <input type=\"range\" min=\"0\" max=\"255\" value={red} onChange={(e) => setRed(parseInt(e.target.value))} />\n</div>\n<div>\n  Green: <input type=\"range\" min=\"0\" max=\"255\" value={green} onChange={(e) => setGreen(parseInt(e.target.value))} />\n</div>\n<div>\n  Blue: <input type=\"range\" min=\"0\" max=\"255\" value={blue} onChange={(e) => setBlue(parseInt(e.target.value))} />\n</div>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Pixelate Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Create pixelated/mosaic effect:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Pixelate]);\nimage.pixelSize(8); // Range: 2-32 (or higher)\n```\n\n**Interactive:**\n\n```javascript\nconst [pixelSize, setPixelSize] = useState(8);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.Pixelate]}\n  pixelSize={pixelSize}\n/>\n\n<input\n  type=\"range\"\n  min=\"2\"\n  max=\"32\"\n  value={pixelSize}\n  onChange={(e) => setPixelSize(parseInt(e.target.value))}\n/>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Sepia Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Apply sepia tone (vintage photo effect):\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Sepia]);\n```\n\nNo configuration needed - applies classic sepia effect."}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Mask Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Remove background by detecting and masking similar colors:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Mask]);\nimage.threshold(10); // Range: 0-255\n```\n\n**How It Works:**\n1. Samples color from four corners of image\n2. If corners have similar color (within threshold), assumes it's background\n3. Makes pixels matching background color transparent\n4. Uses erosion/dilation to smooth edges\n5. Applies refined mask to alpha channel\n\n**Threshold:**\n- Lower = only very similar colors removed\n- Higher = wider range of colors removed\n\n**Example:**\n\n```javascript\nconst [threshold, setThreshold] = useState(10);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.Mask]}\n  threshold={threshold}\n/>\n\n<input\n  type=\"range\"\n  min=\"0\"\n  max=\"255\"\n  value={threshold}\n  onChange={(e) => setThreshold(parseInt(e.target.value))}\n/>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Contrast Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Adjust image contrast:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Contrast]);\nimage.contrast(30); // Range: -100 to 100\n```\n\n**React Example:**\n\n```javascript\nconst [contrast, setContrast] = useState(50);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.Contrast]}\n  contrast={contrast}\n/>\n\n<input\n  type=\"range\"\n  min=\"-100\"\n  max=\"100\"\n  value={contrast}\n  onChange={(e) => setContrast(parseInt(e.target.value))}\n/>\n```\n\n**Values:**\n- Negative = less contrast\n- 0 = no change\n- Positive = more contrast"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Emboss Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Create embossed/raised effect:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Emboss]);\n\nimage.embossStrength(0.5); // Range: 0-1\nimage.embossWhiteLevel(0.5); // Range: 0-1\nimage.embossDirection('top-left'); // Direction\nimage.embossBlend(0.5); // Range: 0-1\n```\n\n**Properties:**\n- `embossStrength` - Strength of emboss effect\n- `embossWhiteLevel` - White level adjustment\n- `embossDirection` - Direction of light source\n- `embossBlend` - Blending amount\n\n**React Example:**\n\n```javascript\nconst [strength, setStrength] = useState(0.5);\nconst [whiteLevel, setWhiteLevel] = useState(0.5);\nconst [blend, setBlend] = useState(0.5);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.Emboss]}\n  embossStrength={strength}\n  embossWhiteLevel={whiteLevel}\n  embossDirection=\"top-left\"\n  embossBlend={blend}\n/>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Enhance Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Enhance image details:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Enhance]);\nimage.enhance(0.4); // Range: -1 to 1\n```\n\n**React Example:**\n\n```javascript\nconst [enhance, setEnhance] = useState(0.4);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.Enhance]}\n  enhance={enhance}\n/>\n\n<input\n  type=\"range\"\n  min=\"-1\"\n  max=\"1\"\n  step=\"0.1\"\n  value={enhance}\n  onChange={(e) => setEnhance(parseFloat(e.target.value))}\n/>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: HSV Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Adjust Hue, Saturation, and Value:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.HSV]);\n\nimage.hue(45); // Range: -180 to 180\nimage.saturation(1.5); // Range: -2 to 10\nimage.value(0.3); // Range: -2 to 2\n```\n\n**React Example:**\n\n```javascript\nconst [hue, setHue] = useState(0);\nconst [saturation, setSaturation] = useState(0);\nconst [value, setValue] = useState(0);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.HSV]}\n  hue={hue}\n  saturation={saturation}\n  value={value}\n/>\n\n<div>\n  Hue: <input type=\"range\" min=\"-259\" max=\"259\" value={hue} onChange={(e) => setHue(parseInt(e.target.value))} />\n</div>\n<div>\n  Saturation: <input type=\"range\" min=\"-2\" max=\"10\" step=\"0.1\" value={saturation} onChange={(e) => setSaturation(parseFloat(e.target.value))} />\n</div>\n<div>\n  Value: <input type=\"range\" min=\"-2\" max=\"2\" step=\"0.1\" value={value} onChange={(e) => setValue(parseFloat(e.target.value))} />\n</div>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Kaleidoscope Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Create kaleidoscope mirror effect:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Kaleidoscope]);\n\nimage.kaleidoscopePower(3); // Range: 2-8 (number of reflections)\nimage.kaleidoscopeAngle(0); // Range: 0-360\n```\n\n**React Example:**\n\n```javascript\nconst [power, setPower] = useState(3);\nconst [angle, setAngle] = useState(0);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.Kaleidoscope]}\n  kaleidoscopePower={power}\n  kaleidoscopeAngle={angle}\n/>\n\n<div>\n  Power: <input type=\"range\" min=\"2\" max=\"8\" step=\"1\" value={power} onChange={(e) => setPower(parseInt(e.target.value))} />\n</div>\n<div>\n  Angle: <input type=\"range\" min=\"0\" max=\"360\" step=\"0.1\" value={angle} onChange={(e) => setAngle(parseFloat(e.target.value))} />\n</div>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Noise Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Add noise/grain to image:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Noise]);\nimage.noise(0.3); // Range: 0-1\n```\n\n**React Example:**\n\n```javascript\nconst [noise, setNoise] = useState(0.5);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.Noise]}\n  noise={noise}\n/>\n\n<input\n  type=\"range\"\n  min=\"0\"\n  max=\"1\"\n  step=\"0.1\"\n  value={noise}\n  onChange={(e) => setNoise(parseFloat(e.target.value))}\n/>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Solarize Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Apply solarization effect (photo reversal):\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Solarize]);\nimage.threshold(0.5); // Range: 0-1\n```\n\n**React Example:**\n\n```javascript\nconst [threshold, setThreshold] = useState(0.5);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.Solarize]}\n  threshold={threshold}\n/>\n\n<input\n  type=\"range\"\n  min=\"0\"\n  max=\"1\"\n  step=\"0.1\"\n  value={threshold}\n  onChange={(e) => setThreshold(parseFloat(e.target.value))}\n/>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Threshold Filter\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Convert to black and white based on threshold:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Threshold]);\nimage.threshold(0.5); // Range: 0-1\n```\n\n**How It Works:**\n- Converts image to pure black and white\n- Pixels above threshold → white\n- Pixels below threshold → black\n\n**React Example:**\n\n```javascript\nconst [threshold, setThreshold] = useState(0.5);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.Threshold]}\n  threshold={threshold}\n/>\n\n<input\n  type=\"range\"\n  min=\"0\"\n  max=\"1\"\n  step=\"0.1\"\n  value={threshold}\n  onChange={(e) => setThreshold(parseFloat(e.target.value))}\n/>\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Brightness Filter (New)\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "**Note:** Introduced in Konva 10.0.0 to replace deprecated Brighten filter.\n\nAdjust brightness similar to CSS `filter: brightness()`:\n\n```javascript\nimage.cache();\nimage.filters([Konva.Filters.Brightness]);\nimage.brightness(1.5); // Range: 0-2\n```\n\n**Values:**\n- `0` - Completely black\n- `1` - Original (no change)\n- `> 1` - Brighter\n- `2` - Very bright\n\n**React Example:**\n\n```javascript\nconst [brightness, setBrightness] = useState(1.5);\n\n<Image\n  image={image}\n  filters={[Konva.Filters.Brightness]}\n  brightness={brightness}\n/>\n\n<input\n  type=\"range\"\n  min=\"0\"\n  max=\"2\"\n  step=\"0.1\"\n  value={brightness}\n  onChange={(e) => setBrightness(parseFloat(e.target.value))}\n/>\n```\n\n**Comparison with Brighten (deprecated):**\n- Brighten: Range -1 to 1\n- Brightness: Range 0 to 2 (CSS-compatible)\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: All Easings\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Konva provides comprehensive easing functions for smooth animations:\n\n**Easing Categories:**\n1. **Linear** - Constant speed\n2. **Ease** - EaseIn, EaseOut, EaseInOut\n3. **Back** - BackEaseIn, BackEaseOut, BackEaseInOut\n4. **Elastic** - ElasticEaseIn, ElasticEaseOut, ElasticEaseInOut\n5. **Bounce** - BounceEaseIn, BounceEaseOut, BounceEaseInOut\n6. **Strong** - StrongEaseIn, StrongEaseOut, StrongEaseInOut\n\n**Example - All Easings Demo:**\n\n```javascript\nconst easings = [\n  'Linear',\n  'EaseIn', 'EaseOut', 'EaseInOut',\n  'BackEaseIn', 'BackEaseOut', 'BackEaseInOut',\n  'ElasticEaseIn', 'ElasticEaseOut', 'ElasticEaseInOut',\n  'BounceEaseIn', 'BounceEaseOut', 'BounceEaseInOut',\n  'StrongEaseIn', 'StrongEaseOut', 'StrongEaseInOut'\n];\n\nconst tweens = [];\n\neasings.forEach((easing, i) => {\n  const text = new Konva.Text({\n    x: 50,\n    y: 30 + i * 25,\n    text: easing,\n    fontSize: 16,\n    fill: 'black'\n  });\n  \n  layer.add(text);\n  \n  tweens.push(\n    new Konva.Tween({\n      node: text,\n      duration: 2,\n      x: stage.width() - 200,\n      easing: Konva.Easings[easing]\n    })\n  );\n});\n\n// Play all tweens\ntweens.forEach(tween => {\n  tween.reset();\n  tween.play();\n});\n```\n\n**React Example:**\n\n```javascript\nconst easings = ['Linear', 'EaseIn', 'EaseOut', 'EaseInOut', 'BackEaseIn', ...];\nconst textsRef = useRef([]);\nconst tweensRef = useRef([]);\n\nuseEffect(() => {\n  tweensRef.current = textsRef.current.map((text, i) => {\n    return new Konva.Tween({\n      node: text,\n      duration: 2,\n      x: window.innerWidth - 200,\n      easing: Konva.Easings[easings[i]]\n    });\n  });\n}, []);\n\nconst handlePlay = () => {\n  tweensRef.current.forEach(tween => {\n    tween.reset();\n    tween.play();\n  });\n};\n\nreturn (\n  <>\n    <button onClick={handlePlay}>Play</button>\n    <Stage>\n      <Layer>\n        {easings.map((easing, i) => (\n          <Text\n            key={i}\n            ref={node => textsRef.current[i] = node}\n            x={50}\n            y={30 + i * 25}\n            text={easing}\n            fontSize={16}\n            fill=\"black\"\n          />\n        ))}\n      </Layer>\n    </Stage>\n  </>\n);\n```"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Complex Tweening\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "For complex animations, combine tweens with animations or use chaining:\n\n```javascript\nconst circle = new Konva.Circle({\n  x: stage.width() / 2,\n  y: stage.height() / 2,\n  radius: 70,\n  fillLinearGradientStartPoint: { x: -50, y: -50 },\n  fillLinearGradientEndPoint: { x: 50, y: 50 },\n  fillLinearGradientColorStops: [0, 'red', 1, 'yellow'],\n  stroke: 'black',\n  strokeWidth: 4,\n  draggable: true\n});\n\ncircle.on('click', () => {\n  // Tween scale up\n  const tween = new Konva.Tween({\n    node: circle,\n    duration: 1,\n    scaleX: 1.5,\n    scaleY: 1.5,\n    easing: Konva.Easings.EaseInOut,\n    onFinish: () => {\n      // Chain: scale back with bounce\n      const tween2 = new Konva.Tween({\n        node: circle,\n        duration: 1,\n        scaleX: 1,\n        scaleY: 1,\n        easing: Konva.Easings.BounceEaseOut\n      });\n      tween2.play();\n    }\n  });\n  tween.play();\n  \n  // Simultaneously: animate gradient colors\n  let ratio = 0;\n  const anim = new Konva.Animation((frame) => {\n    ratio += frame.timeDiff / 1000;\n    if (ratio > 1) ratio = 0;\n    \n    circle.fillLinearGradientColorStops([\n      0, 'red',\n      ratio, 'yellow',\n      1, 'blue'\n    ]);\n  }, layer);\n  \n  anim.start();\n  setTimeout(() => anim.stop(), 2000);\n});\n```\n\n**Key Techniques:**\n- Chain tweens using `onFinish` callback\n- Combine tweens with animations\n- Update complex properties manually in animation loop\n- For advanced needs, consider GreenSock (GSAP) with Konva plugin"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Finish Event\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Execute callback when tween completes:\n\n```javascript\nconst tween = new Konva.Tween({\n  node: rect,\n  duration: 1,\n  x: 400,\n  rotation: 180,\n  fill: 'blue',\n  easing: Konva.Easings.EaseInOut,\n  onFinish: function() {\n    console.log('Tween finished!');\n    \n    // Chain another tween\n    const tween2 = new Konva.Tween({\n      node: rect,\n      duration: 1,\n      x: 100,\n      rotation: 0,\n      fill: 'red'\n    });\n    tween2.play();\n  }\n});\n\ntween.play();\n```\n\n**React Example:**\n\n```javascript\nconst handleAnimate = () => {\n  const tween = new Konva.Tween({\n    node: rectRef.current,\n    duration: 1,\n    x: 400,\n    rotation: 180,\n    fill: 'blue',\n    onFinish: () => {\n      console.log('Animation complete');\n      setAnimationState('finished');\n    }\n  });\n  \n  tween.play();\n};\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Select by ID\nLevel: H3\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "Select shapes by unique `id` using `#` prefix:\n\n```javascript\n// Create shape with ID\nconst rect = new Konva.Rect({\n  x: 100,\n  y: 100,\n  width: 50,\n  height: 50,\n  fill: 'red',\n  id: 'myRect',\n  draggable: true\n});\n\n// Find by ID (returns single node)\nconst rectangle = layer.findOne('#myRect');\n\n// Animate it\nrectangle.to({\n  duration: 1,\n  rotation: 360,\n  fill: 'blue',\n  easing: Konva.Easings.EaseInOut\n});\n```\n\n**Key Methods:**\n- `findOne('#id')` - Returns single node (faster for unique IDs)\n- `find('#id')` - Returns array (even if only one result)\n\n**React Example:**\n\n```javascript\nconst layerRef = useRef(null);\n\nconst handleClick = () => {\n  // Find by ID and animate\n  const rectangle = layerRef.current.findOne('#myRect');\n  rectangle.to({\n    duration: 1,\n    rotation: 360,\n    fill: 'blue',\n    easing: Konva.Easings.EaseInOut\n  });\n};\n\nreturn (\n  <>\n    <button onClick={handleClick}>Activate Rectangle</button>\n    <Stage>\n      <Layer ref={layerRef}>\n        <Rect\n          x={100}\n          y={100}\n          width={50}\n          height={50}\n          fill=\"red\"\n          id=\"myRect\"\n          draggable\n        />\n      </Layer>\n    </Stage>\n  </>\n);\n```\n\n**Selector Summary:**\n\n```javascript\n// By ID (unique)\nlayer.findOne('#myShape');\n\n// By Name (can be multiple)\nlayer.find('.shapeName');\n\n// By Type\nlayer.find('Circle');\nlayer.find('Rect');\n\n// Combined (advanced)\nlayer.find('Circle.highlighted'); // Circles with name \"highlighted\"\n```\n\n---"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
{"messages": [{"role": "system", "content": "Section: Additional Resources\nLevel: H2\nSource: konva-complete-documentation.md"}, {"role": "user", "content": "- **Official Website:** https://konvajs.org\n- **GitHub:** https://github.com/konvajs/konva\n- **Demos:** https://konvajs.org/docs/demos/index.html\n- **Community:** Stack Overflow, Discord\n- **Commercial Products:** Design Editor SDK\n\n---\n\n*This documentation was extracted from konvajs.org and compiled for reference purposes.*"}, {"role": "assistant", "content": "This documentation has been reviewed and is ready for reference."}]}
